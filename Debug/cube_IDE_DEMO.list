
cube_IDE_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f10  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080030f4  080030f4  000040f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003120  08003120  0000540c  2**0
                  CONTENTS
  4 .ARM          00000000  08003120  08003120  0000540c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003120  08003120  0000540c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003120  08003120  00004120  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003124  08003124  00004124  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000040c  20000000  08003128  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  2000040c  08003534  0000540c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08003534  00005598  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000540c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d4  00000000  00000000  00005435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022c3  00000000  00000000  00011c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  00013ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000960  00000000  00000000  00014ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019177  00000000  00000000  00015440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000108d7  00000000  00000000  0002e5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ec2  00000000  00000000  0003ee8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfd50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030e0  00000000  00000000  000cfd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d2e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000040c 	.word	0x2000040c
 8000200:	00000000 	.word	0x00000000
 8000204:	080030dc 	.word	0x080030dc

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000410 	.word	0x20000410
 8000220:	080030dc 	.word	0x080030dc

08000224 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	b088      	sub	sp, #32
 8000228:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800022a:	f107 0310 	add.w	r3, r7, #16
 800022e:	2200      	movs	r2, #0
 8000230:	601a      	str	r2, [r3, #0]
 8000232:	605a      	str	r2, [r3, #4]
 8000234:	609a      	str	r2, [r3, #8]
 8000236:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000238:	4b2c      	ldr	r3, [pc, #176]	@ (80002ec <MX_GPIO_Init+0xc8>)
 800023a:	699b      	ldr	r3, [r3, #24]
 800023c:	4a2b      	ldr	r2, [pc, #172]	@ (80002ec <MX_GPIO_Init+0xc8>)
 800023e:	f043 0304 	orr.w	r3, r3, #4
 8000242:	6193      	str	r3, [r2, #24]
 8000244:	4b29      	ldr	r3, [pc, #164]	@ (80002ec <MX_GPIO_Init+0xc8>)
 8000246:	699b      	ldr	r3, [r3, #24]
 8000248:	f003 0304 	and.w	r3, r3, #4
 800024c:	60fb      	str	r3, [r7, #12]
 800024e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000250:	4b26      	ldr	r3, [pc, #152]	@ (80002ec <MX_GPIO_Init+0xc8>)
 8000252:	699b      	ldr	r3, [r3, #24]
 8000254:	4a25      	ldr	r2, [pc, #148]	@ (80002ec <MX_GPIO_Init+0xc8>)
 8000256:	f043 0308 	orr.w	r3, r3, #8
 800025a:	6193      	str	r3, [r2, #24]
 800025c:	4b23      	ldr	r3, [pc, #140]	@ (80002ec <MX_GPIO_Init+0xc8>)
 800025e:	699b      	ldr	r3, [r3, #24]
 8000260:	f003 0308 	and.w	r3, r3, #8
 8000264:	60bb      	str	r3, [r7, #8]
 8000266:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000268:	4b20      	ldr	r3, [pc, #128]	@ (80002ec <MX_GPIO_Init+0xc8>)
 800026a:	699b      	ldr	r3, [r3, #24]
 800026c:	4a1f      	ldr	r2, [pc, #124]	@ (80002ec <MX_GPIO_Init+0xc8>)
 800026e:	f043 0320 	orr.w	r3, r3, #32
 8000272:	6193      	str	r3, [r2, #24]
 8000274:	4b1d      	ldr	r3, [pc, #116]	@ (80002ec <MX_GPIO_Init+0xc8>)
 8000276:	699b      	ldr	r3, [r3, #24]
 8000278:	f003 0320 	and.w	r3, r3, #32
 800027c:	607b      	str	r3, [r7, #4]
 800027e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CS_Pin|DC_Pin, GPIO_PIN_RESET);
 8000280:	2200      	movs	r2, #0
 8000282:	2118      	movs	r1, #24
 8000284:	481a      	ldr	r0, [pc, #104]	@ (80002f0 <MX_GPIO_Init+0xcc>)
 8000286:	f001 f8eb 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, GPIO_PIN_RESET);
 800028a:	2200      	movs	r2, #0
 800028c:	2101      	movs	r1, #1
 800028e:	4819      	ldr	r0, [pc, #100]	@ (80002f4 <MX_GPIO_Init+0xd0>)
 8000290:	f001 f8e6 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY1_Pin;
 8000294:	2301      	movs	r3, #1
 8000296:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000298:	4b17      	ldr	r3, [pc, #92]	@ (80002f8 <MX_GPIO_Init+0xd4>)
 800029a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029c:	2300      	movs	r3, #0
 800029e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(KEY1_GPIO_Port, &GPIO_InitStruct);
 80002a0:	f107 0310 	add.w	r3, r7, #16
 80002a4:	4619      	mov	r1, r3
 80002a6:	4812      	ldr	r0, [pc, #72]	@ (80002f0 <MX_GPIO_Init+0xcc>)
 80002a8:	f000 ff46 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin;
 80002ac:	2318      	movs	r3, #24
 80002ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b0:	2301      	movs	r3, #1
 80002b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002b8:	2302      	movs	r3, #2
 80002ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	4619      	mov	r1, r3
 80002c2:	480b      	ldr	r0, [pc, #44]	@ (80002f0 <MX_GPIO_Init+0xcc>)
 80002c4:	f000 ff38 	bl	8001138 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_G_Pin;
 80002c8:	2301      	movs	r3, #1
 80002ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002cc:	2301      	movs	r3, #1
 80002ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002d0:	2300      	movs	r3, #0
 80002d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002d4:	2302      	movs	r3, #2
 80002d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_G_GPIO_Port, &GPIO_InitStruct);
 80002d8:	f107 0310 	add.w	r3, r7, #16
 80002dc:	4619      	mov	r1, r3
 80002de:	4805      	ldr	r0, [pc, #20]	@ (80002f4 <MX_GPIO_Init+0xd0>)
 80002e0:	f000 ff2a 	bl	8001138 <HAL_GPIO_Init>

}
 80002e4:	bf00      	nop
 80002e6:	3720      	adds	r7, #32
 80002e8:	46bd      	mov	sp, r7
 80002ea:	bd80      	pop	{r7, pc}
 80002ec:	40021000 	.word	0x40021000
 80002f0:	40010800 	.word	0x40010800
 80002f4:	40010c00 	.word	0x40010c00
 80002f8:	10110000 	.word	0x10110000

080002fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000300:	4b12      	ldr	r3, [pc, #72]	@ (800034c <MX_I2C1_Init+0x50>)
 8000302:	4a13      	ldr	r2, [pc, #76]	@ (8000350 <MX_I2C1_Init+0x54>)
 8000304:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000306:	4b11      	ldr	r3, [pc, #68]	@ (800034c <MX_I2C1_Init+0x50>)
 8000308:	4a12      	ldr	r2, [pc, #72]	@ (8000354 <MX_I2C1_Init+0x58>)
 800030a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800030c:	4b0f      	ldr	r3, [pc, #60]	@ (800034c <MX_I2C1_Init+0x50>)
 800030e:	2200      	movs	r2, #0
 8000310:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000312:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_I2C1_Init+0x50>)
 8000314:	2200      	movs	r2, #0
 8000316:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <MX_I2C1_Init+0x50>)
 800031a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800031e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000320:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <MX_I2C1_Init+0x50>)
 8000322:	2200      	movs	r2, #0
 8000324:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000326:	4b09      	ldr	r3, [pc, #36]	@ (800034c <MX_I2C1_Init+0x50>)
 8000328:	2200      	movs	r2, #0
 800032a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800032c:	4b07      	ldr	r3, [pc, #28]	@ (800034c <MX_I2C1_Init+0x50>)
 800032e:	2200      	movs	r2, #0
 8000330:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000332:	4b06      	ldr	r3, [pc, #24]	@ (800034c <MX_I2C1_Init+0x50>)
 8000334:	2200      	movs	r2, #0
 8000336:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000338:	4804      	ldr	r0, [pc, #16]	@ (800034c <MX_I2C1_Init+0x50>)
 800033a:	f001 f8a9 	bl	8001490 <HAL_I2C_Init>
 800033e:	4603      	mov	r3, r0
 8000340:	2b00      	cmp	r3, #0
 8000342:	d001      	beq.n	8000348 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000344:	f000 f8d9 	bl	80004fa <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20000428 	.word	0x20000428
 8000350:	40005400 	.word	0x40005400
 8000354:	000186a0 	.word	0x000186a0

08000358 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b088      	sub	sp, #32
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000360:	f107 0310 	add.w	r3, r7, #16
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
 8000368:	605a      	str	r2, [r3, #4]
 800036a:	609a      	str	r2, [r3, #8]
 800036c:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a15      	ldr	r2, [pc, #84]	@ (80003c8 <HAL_I2C_MspInit+0x70>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d123      	bne.n	80003c0 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000378:	4b14      	ldr	r3, [pc, #80]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a13      	ldr	r2, [pc, #76]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 800037e:	f043 0308 	orr.w	r3, r3, #8
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b11      	ldr	r3, [pc, #68]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0308 	and.w	r3, r3, #8
 800038c:	60fb      	str	r3, [r7, #12]
 800038e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = MPU6050_SCL_Pin|MPU6050_SDA_Pin;
 8000390:	23c0      	movs	r3, #192	@ 0xc0
 8000392:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000394:	2312      	movs	r3, #18
 8000396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000398:	2303      	movs	r3, #3
 800039a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800039c:	f107 0310 	add.w	r3, r7, #16
 80003a0:	4619      	mov	r1, r3
 80003a2:	480b      	ldr	r0, [pc, #44]	@ (80003d0 <HAL_I2C_MspInit+0x78>)
 80003a4:	f000 fec8 	bl	8001138 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003a8:	4b08      	ldr	r3, [pc, #32]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	4a07      	ldr	r2, [pc, #28]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 80003ae:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003b2:	61d3      	str	r3, [r2, #28]
 80003b4:	4b05      	ldr	r3, [pc, #20]	@ (80003cc <HAL_I2C_MspInit+0x74>)
 80003b6:	69db      	ldr	r3, [r3, #28]
 80003b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003bc:	60bb      	str	r3, [r7, #8]
 80003be:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80003c0:	bf00      	nop
 80003c2:	3720      	adds	r7, #32
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40005400 	.word	0x40005400
 80003cc:	40021000 	.word	0x40021000
 80003d0:	40010c00 	.word	0x40010c00

080003d4 <Delay_tick>:
void Delay(uint32_t count)
{
	for(int i = 0;i < count; i++);
}
void Delay_tick(uint32_t ms)
{
 80003d4:	b480      	push	{r7}
 80003d6:	b085      	sub	sp, #20
 80003d8:	af00      	add	r7, sp, #0
 80003da:	6078      	str	r0, [r7, #4]
    uint32_t start;

    start = uwTick; //log the start value of systick
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <Delay_tick+0x2c>)
 80003de:	681b      	ldr	r3, [r3, #0]
 80003e0:	60fb      	str	r3, [r7, #12]

    while(uwTick - start <ms) //wait until  x ms
 80003e2:	bf00      	nop
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <Delay_tick+0x2c>)
 80003e6:	681a      	ldr	r2, [r3, #0]
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	1ad3      	subs	r3, r2, r3
 80003ec:	687a      	ldr	r2, [r7, #4]
 80003ee:	429a      	cmp	r2, r3
 80003f0:	d8f8      	bhi.n	80003e4 <Delay_tick+0x10>
    {
      
    }
}
 80003f2:	bf00      	nop
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bc80      	pop	{r7}
 80003fc:	4770      	bx	lr
 80003fe:	bf00      	nop
 8000400:	20000594 	.word	0x20000594

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b082      	sub	sp, #8
 8000408:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 fbe3 	bl	8000bd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f82f 	bl	8000470 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f7ff ff07 	bl	8000224 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000416:	f000 fabd 	bl	8000994 <MX_USART1_UART_Init>
  MX_SPI1_Init();
 800041a:	f000 f9c3 	bl	80007a4 <MX_SPI1_Init>
  MX_I2C1_Init();
 800041e:	f7ff ff6d 	bl	80002fc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000422:	f000 fae1 	bl	80009e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 8000426:	f000 f8c3 	bl	80005b0 <OLED_Init>
  OLED_Fill(0xFF);
 800042a:	20ff      	movs	r0, #255	@ 0xff
 800042c:	f000 f91e 	bl	800066c <OLED_Fill>
  Draw_BMP(0,0,128,8,(unsigned char *)BMP1);
 8000430:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <main+0x64>)
 8000432:	9300      	str	r3, [sp, #0]
 8000434:	2308      	movs	r3, #8
 8000436:	2280      	movs	r2, #128	@ 0x80
 8000438:	2100      	movs	r1, #0
 800043a:	2000      	movs	r0, #0
 800043c:	f000 f943 	bl	80006c6 <Draw_BMP>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Delay(0xFFFFF);
	  // Delay(0xFFFFF);
    HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2101      	movs	r1, #1
 8000444:	4809      	ldr	r0, [pc, #36]	@ (800046c <main+0x68>)
 8000446:	f001 f80b 	bl	8001460 <HAL_GPIO_WritePin>
    Delay_tick(500);
 800044a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800044e:	f7ff ffc1 	bl	80003d4 <Delay_tick>
    //OLED_Fill(0x00);
    HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2101      	movs	r1, #1
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <main+0x68>)
 8000458:	f001 f802 	bl	8001460 <HAL_GPIO_WritePin>
    Delay_tick(500);
 800045c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000460:	f7ff ffb8 	bl	80003d4 <Delay_tick>
    HAL_GPIO_WritePin(LED_G_GPIO_Port,LED_G_Pin,GPIO_PIN_RESET);
 8000464:	bf00      	nop
 8000466:	e7eb      	b.n	8000440 <main+0x3c>
 8000468:	20000000 	.word	0x20000000
 800046c:	40010c00 	.word	0x40010c00

08000470 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b090      	sub	sp, #64	@ 0x40
 8000474:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000476:	f107 0318 	add.w	r3, r7, #24
 800047a:	2228      	movs	r2, #40	@ 0x28
 800047c:	2100      	movs	r1, #0
 800047e:	4618      	mov	r0, r3
 8000480:	f002 fe00 	bl	8003084 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000484:	1d3b      	adds	r3, r7, #4
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000492:	2301      	movs	r3, #1
 8000494:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000496:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800049a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800049c:	2300      	movs	r3, #0
 800049e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004a0:	2301      	movs	r3, #1
 80004a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004a4:	2302      	movs	r3, #2
 80004a6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80004ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80004ae:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80004b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004b4:	f107 0318 	add.w	r3, r7, #24
 80004b8:	4618      	mov	r0, r3
 80004ba:	f001 f9c7 	bl	800184c <HAL_RCC_OscConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80004c4:	f000 f819 	bl	80004fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004c8:	230f      	movs	r3, #15
 80004ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004cc:	2302      	movs	r3, #2
 80004ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004d0:	2300      	movs	r3, #0
 80004d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80004d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80004de:	1d3b      	adds	r3, r7, #4
 80004e0:	2102      	movs	r1, #2
 80004e2:	4618      	mov	r0, r3
 80004e4:	f001 fc34 	bl	8001d50 <HAL_RCC_ClockConfig>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004ee:	f000 f804 	bl	80004fa <Error_Handler>
  }
}
 80004f2:	bf00      	nop
 80004f4:	3740      	adds	r7, #64	@ 0x40
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}

080004fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004fa:	b480      	push	{r7}
 80004fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004fe:	b672      	cpsid	i
}
 8000500:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000502:	bf00      	nop
 8000504:	e7fd      	b.n	8000502 <Error_Handler+0x8>
	...

08000508 <OLED_WR_CMD>:
 *      Author: Kevin-Rie
 */
#include"oled.h"

__UINT8_TYPE__ OLED_WR_CMD(__UINT8_TYPE__ CMD)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af02      	add	r7, sp, #8
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
   __UINT8_TYPE__ RXDATA =0;
 8000512:	2300      	movs	r3, #0
 8000514:	73fb      	strb	r3, [r7, #15]

   HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,0);//д����DC�͵�ƽ
 8000516:	2200      	movs	r2, #0
 8000518:	2110      	movs	r1, #16
 800051a:	480e      	ldr	r0, [pc, #56]	@ (8000554 <OLED_WR_CMD+0x4c>)
 800051c:	f000 ffa0 	bl	8001460 <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,0);//�͵�ƽѡ����ʾ��
 8000520:	2200      	movs	r2, #0
 8000522:	2108      	movs	r1, #8
 8000524:	480b      	ldr	r0, [pc, #44]	@ (8000554 <OLED_WR_CMD+0x4c>)
 8000526:	f000 ff9b 	bl	8001460 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi1,&CMD,&RXDATA,1,1000);
 800052a:	f107 020f 	add.w	r2, r7, #15
 800052e:	1df9      	adds	r1, r7, #7
 8000530:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000534:	9300      	str	r3, [sp, #0]
 8000536:	2301      	movs	r3, #1
 8000538:	4807      	ldr	r0, [pc, #28]	@ (8000558 <OLED_WR_CMD+0x50>)
 800053a:	f001 fe1b 	bl	8002174 <HAL_SPI_TransmitReceive>

   HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,1);//CS�ߵ�ƽdisable
 800053e:	2201      	movs	r2, #1
 8000540:	2108      	movs	r1, #8
 8000542:	4804      	ldr	r0, [pc, #16]	@ (8000554 <OLED_WR_CMD+0x4c>)
 8000544:	f000 ff8c 	bl	8001460 <HAL_GPIO_WritePin>
   
   return RXDATA;
 8000548:	7bfb      	ldrb	r3, [r7, #15]
}
 800054a:	4618      	mov	r0, r3
 800054c:	3710      	adds	r7, #16
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	40010800 	.word	0x40010800
 8000558:	200004ac 	.word	0x200004ac

0800055c <OLED_WR_DATA>:

__UINT8_TYPE__ OLED_WR_DATA(__UINT8_TYPE__ DATA)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
    __UINT8_TYPE__ RXDATA =0;
 8000566:	2300      	movs	r3, #0
 8000568:	73fb      	strb	r3, [r7, #15]

   HAL_GPIO_WritePin(DC_GPIO_Port,DC_Pin,1);//д����DC�͵�ƽ
 800056a:	2201      	movs	r2, #1
 800056c:	2110      	movs	r1, #16
 800056e:	480e      	ldr	r0, [pc, #56]	@ (80005a8 <OLED_WR_DATA+0x4c>)
 8000570:	f000 ff76 	bl	8001460 <HAL_GPIO_WritePin>

   HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,0);//�͵�ƽѡ����ʾ��
 8000574:	2200      	movs	r2, #0
 8000576:	2108      	movs	r1, #8
 8000578:	480b      	ldr	r0, [pc, #44]	@ (80005a8 <OLED_WR_DATA+0x4c>)
 800057a:	f000 ff71 	bl	8001460 <HAL_GPIO_WritePin>

   HAL_SPI_TransmitReceive(&hspi1,&DATA,&RXDATA,1,1000);
 800057e:	f107 020f 	add.w	r2, r7, #15
 8000582:	1df9      	adds	r1, r7, #7
 8000584:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000588:	9300      	str	r3, [sp, #0]
 800058a:	2301      	movs	r3, #1
 800058c:	4807      	ldr	r0, [pc, #28]	@ (80005ac <OLED_WR_DATA+0x50>)
 800058e:	f001 fdf1 	bl	8002174 <HAL_SPI_TransmitReceive>

   HAL_GPIO_WritePin(CS_GPIO_Port,CS_Pin,1);//CS�ߵ�ƽdisable
 8000592:	2201      	movs	r2, #1
 8000594:	2108      	movs	r1, #8
 8000596:	4804      	ldr	r0, [pc, #16]	@ (80005a8 <OLED_WR_DATA+0x4c>)
 8000598:	f000 ff62 	bl	8001460 <HAL_GPIO_WritePin>
   
   return RXDATA;
 800059c:	7bfb      	ldrb	r3, [r7, #15]
}
 800059e:	4618      	mov	r0, r3
 80005a0:	3710      	adds	r7, #16
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010800 	.word	0x40010800
 80005ac:	200004ac 	.word	0x200004ac

080005b0 <OLED_Init>:

void OLED_Init(void)        
{ 
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  Delay_tick(100);
 80005b4:	2064      	movs	r0, #100	@ 0x64
 80005b6:	f7ff ff0d 	bl	80003d4 <Delay_tick>
	OLED_WR_CMD(0xAE); //display off
 80005ba:	20ae      	movs	r0, #174	@ 0xae
 80005bc:	f7ff ffa4 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x20);	//Set Memory Addressing Mode	
 80005c0:	2020      	movs	r0, #32
 80005c2:	f7ff ffa1 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x10);	//00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80005c6:	2010      	movs	r0, #16
 80005c8:	f7ff ff9e 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xb0);	//Set Page Start Address for Page Addressing Mode,0-7
 80005cc:	20b0      	movs	r0, #176	@ 0xb0
 80005ce:	f7ff ff9b 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xc8);	//Set COM Output Scan Direction
 80005d2:	20c8      	movs	r0, #200	@ 0xc8
 80005d4:	f7ff ff98 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x00); //---set low column address
 80005d8:	2000      	movs	r0, #0
 80005da:	f7ff ff95 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x10); //---set high column address
 80005de:	2010      	movs	r0, #16
 80005e0:	f7ff ff92 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x40); //--set start line address
 80005e4:	2040      	movs	r0, #64	@ 0x40
 80005e6:	f7ff ff8f 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x81); //--set contrast control register
 80005ea:	2081      	movs	r0, #129	@ 0x81
 80005ec:	f7ff ff8c 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xff); //亮度调节 0x00~0xff
 80005f0:	20ff      	movs	r0, #255	@ 0xff
 80005f2:	f7ff ff89 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xa1); //--set segment re-map 0 to 127
 80005f6:	20a1      	movs	r0, #161	@ 0xa1
 80005f8:	f7ff ff86 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xa6); //--set normal display
 80005fc:	20a6      	movs	r0, #166	@ 0xa6
 80005fe:	f7ff ff83 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xa8); //--set multiplex ratio(1 to 64)
 8000602:	20a8      	movs	r0, #168	@ 0xa8
 8000604:	f7ff ff80 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x3F); //
 8000608:	203f      	movs	r0, #63	@ 0x3f
 800060a:	f7ff ff7d 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xa4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800060e:	20a4      	movs	r0, #164	@ 0xa4
 8000610:	f7ff ff7a 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xd3); //-set display offset
 8000614:	20d3      	movs	r0, #211	@ 0xd3
 8000616:	f7ff ff77 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x00); //-not offset
 800061a:	2000      	movs	r0, #0
 800061c:	f7ff ff74 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xd5); //--set display clock divide ratio/oscillator frequency
 8000620:	20d5      	movs	r0, #213	@ 0xd5
 8000622:	f7ff ff71 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xf0); //--set divide ratio
 8000626:	20f0      	movs	r0, #240	@ 0xf0
 8000628:	f7ff ff6e 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xd9); //--set pre-charge period
 800062c:	20d9      	movs	r0, #217	@ 0xd9
 800062e:	f7ff ff6b 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x22); //
 8000632:	2022      	movs	r0, #34	@ 0x22
 8000634:	f7ff ff68 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xda); //--set com pins hardware configuration
 8000638:	20da      	movs	r0, #218	@ 0xda
 800063a:	f7ff ff65 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x12);
 800063e:	2012      	movs	r0, #18
 8000640:	f7ff ff62 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xdb); //--set vcomh
 8000644:	20db      	movs	r0, #219	@ 0xdb
 8000646:	f7ff ff5f 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x20); //0x20,0.77xVcc
 800064a:	2020      	movs	r0, #32
 800064c:	f7ff ff5c 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x8d); //--set DC-DC enable
 8000650:	208d      	movs	r0, #141	@ 0x8d
 8000652:	f7ff ff59 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0x14); //
 8000656:	2014      	movs	r0, #20
 8000658:	f7ff ff56 	bl	8000508 <OLED_WR_CMD>
	OLED_WR_CMD(0xaf); //--turn on oled panel
 800065c:	20af      	movs	r0, #175	@ 0xaf
 800065e:	f7ff ff53 	bl	8000508 <OLED_WR_CMD>
  Delay_tick(100);
 8000662:	2064      	movs	r0, #100	@ 0x64
 8000664:	f7ff feb6 	bl	80003d4 <Delay_tick>
} 
 8000668:	bf00      	nop
 800066a:	bd80      	pop	{r7, pc}

0800066c <OLED_Fill>:

void OLED_Fill(unsigned char bmp_data)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b084      	sub	sp, #16
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	71fb      	strb	r3, [r7, #7]
	unsigned char y,x;
	
	for(y=0;y<8;y++)
 8000676:	2300      	movs	r3, #0
 8000678:	73fb      	strb	r3, [r7, #15]
 800067a:	e01c      	b.n	80006b6 <OLED_Fill+0x4a>
	{
		OLED_WR_CMD(0xb0+y);
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3b50      	subs	r3, #80	@ 0x50
 8000680:	b2db      	uxtb	r3, r3
 8000682:	4618      	mov	r0, r3
 8000684:	f7ff ff40 	bl	8000508 <OLED_WR_CMD>
		OLED_WR_CMD(0x01);
 8000688:	2001      	movs	r0, #1
 800068a:	f7ff ff3d 	bl	8000508 <OLED_WR_CMD>
		OLED_WR_CMD(0x10);
 800068e:	2010      	movs	r0, #16
 8000690:	f7ff ff3a 	bl	8000508 <OLED_WR_CMD>
		for(x=0;x<128;x++)
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]
 8000698:	e006      	b.n	80006a8 <OLED_Fill+0x3c>
			OLED_WR_DATA(bmp_data);
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff5d 	bl	800055c <OLED_WR_DATA>
		for(x=0;x<128;x++)
 80006a2:	7bbb      	ldrb	r3, [r7, #14]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73bb      	strb	r3, [r7, #14]
 80006a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	daf4      	bge.n	800069a <OLED_Fill+0x2e>
	for(y=0;y<8;y++)
 80006b0:	7bfb      	ldrb	r3, [r7, #15]
 80006b2:	3301      	adds	r3, #1
 80006b4:	73fb      	strb	r3, [r7, #15]
 80006b6:	7bfb      	ldrb	r3, [r7, #15]
 80006b8:	2b07      	cmp	r3, #7
 80006ba:	d9df      	bls.n	800067c <OLED_Fill+0x10>
	}
}
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}

080006c6 <Draw_BMP>:

void Draw_BMP(unsigned char x0,unsigned char y0,unsigned char x1,unsigned char y1,unsigned char * bmp)
{ 	
 80006c6:	b590      	push	{r4, r7, lr}
 80006c8:	b085      	sub	sp, #20
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4604      	mov	r4, r0
 80006ce:	4608      	mov	r0, r1
 80006d0:	4611      	mov	r1, r2
 80006d2:	461a      	mov	r2, r3
 80006d4:	4623      	mov	r3, r4
 80006d6:	71fb      	strb	r3, [r7, #7]
 80006d8:	4603      	mov	r3, r0
 80006da:	71bb      	strb	r3, [r7, #6]
 80006dc:	460b      	mov	r3, r1
 80006de:	717b      	strb	r3, [r7, #5]
 80006e0:	4613      	mov	r3, r2
 80006e2:	713b      	strb	r3, [r7, #4]
  unsigned int ii=0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  unsigned char x,y;
  
  if(y1%8==0) y=y1/8;      
 80006e8:	793b      	ldrb	r3, [r7, #4]
 80006ea:	f003 0307 	and.w	r3, r3, #7
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d103      	bne.n	80006fc <Draw_BMP+0x36>
 80006f4:	793b      	ldrb	r3, [r7, #4]
 80006f6:	08db      	lsrs	r3, r3, #3
 80006f8:	72bb      	strb	r3, [r7, #10]
 80006fa:	e004      	b.n	8000706 <Draw_BMP+0x40>
  else y=y1/8+1;
 80006fc:	793b      	ldrb	r3, [r7, #4]
 80006fe:	08db      	lsrs	r3, r3, #3
 8000700:	b2db      	uxtb	r3, r3
 8000702:	3301      	adds	r3, #1
 8000704:	72bb      	strb	r3, [r7, #10]
	for(y=y0;y<=y1;y++)
 8000706:	79bb      	ldrb	r3, [r7, #6]
 8000708:	72bb      	strb	r3, [r7, #10]
 800070a:	e01b      	b.n	8000744 <Draw_BMP+0x7e>
	{
		OLED_Set_Pos(x0,y);				
 800070c:	7aba      	ldrb	r2, [r7, #10]
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4611      	mov	r1, r2
 8000712:	4618      	mov	r0, r3
 8000714:	f000 f81f 	bl	8000756 <OLED_Set_Pos>
    for(x=x0;x<x1;x++)
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	72fb      	strb	r3, [r7, #11]
 800071c:	e00b      	b.n	8000736 <Draw_BMP+0x70>
	    {      
	    	OLED_WR_DATA(bmp[ii++]);	    	
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	1c5a      	adds	r2, r3, #1
 8000722:	60fa      	str	r2, [r7, #12]
 8000724:	6a3a      	ldr	r2, [r7, #32]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4618      	mov	r0, r3
 800072c:	f7ff ff16 	bl	800055c <OLED_WR_DATA>
    for(x=x0;x<x1;x++)
 8000730:	7afb      	ldrb	r3, [r7, #11]
 8000732:	3301      	adds	r3, #1
 8000734:	72fb      	strb	r3, [r7, #11]
 8000736:	7afa      	ldrb	r2, [r7, #11]
 8000738:	797b      	ldrb	r3, [r7, #5]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3ef      	bcc.n	800071e <Draw_BMP+0x58>
	for(y=y0;y<=y1;y++)
 800073e:	7abb      	ldrb	r3, [r7, #10]
 8000740:	3301      	adds	r3, #1
 8000742:	72bb      	strb	r3, [r7, #10]
 8000744:	7aba      	ldrb	r2, [r7, #10]
 8000746:	793b      	ldrb	r3, [r7, #4]
 8000748:	429a      	cmp	r2, r3
 800074a:	d9df      	bls.n	800070c <Draw_BMP+0x46>
	    }
	}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	3714      	adds	r7, #20
 8000752:	46bd      	mov	sp, r7
 8000754:	bd90      	pop	{r4, r7, pc}

08000756 <OLED_Set_Pos>:

void OLED_Set_Pos(unsigned char x, unsigned char y)
{ 
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	4603      	mov	r3, r0
 800075e:	460a      	mov	r2, r1
 8000760:	71fb      	strb	r3, [r7, #7]
 8000762:	4613      	mov	r3, r2
 8000764:	71bb      	strb	r3, [r7, #6]
  OLED_WR_CMD(0xb0+y);
 8000766:	79bb      	ldrb	r3, [r7, #6]
 8000768:	3b50      	subs	r3, #80	@ 0x50
 800076a:	b2db      	uxtb	r3, r3
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff fecb 	bl	8000508 <OLED_WR_CMD>
  OLED_WR_CMD(((x&0xf0)>>4)|0x10);
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	091b      	lsrs	r3, r3, #4
 8000776:	b2db      	uxtb	r3, r3
 8000778:	f043 0310 	orr.w	r3, r3, #16
 800077c:	b2db      	uxtb	r3, r3
 800077e:	4618      	mov	r0, r3
 8000780:	f7ff fec2 	bl	8000508 <OLED_WR_CMD>
  OLED_WR_CMD((x&0x0f)|0x01); 
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	f003 030e 	and.w	r3, r3, #14
 800078c:	b25b      	sxtb	r3, r3
 800078e:	f043 0301 	orr.w	r3, r3, #1
 8000792:	b25b      	sxtb	r3, r3
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff feb6 	bl	8000508 <OLED_WR_CMD>
} 
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80007a8:	4b17      	ldr	r3, [pc, #92]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007aa:	4a18      	ldr	r2, [pc, #96]	@ (800080c <MX_SPI1_Init+0x68>)
 80007ac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007ae:	4b16      	ldr	r3, [pc, #88]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007b6:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007bc:	4b12      	ldr	r3, [pc, #72]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007c2:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80007d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007d8:	2210      	movs	r2, #16
 80007da:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e8:	4b07      	ldr	r3, [pc, #28]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007ee:	4b06      	ldr	r3, [pc, #24]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007f0:	220a      	movs	r2, #10
 80007f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007f4:	4804      	ldr	r0, [pc, #16]	@ (8000808 <MX_SPI1_Init+0x64>)
 80007f6:	f001 fc39 	bl	800206c <HAL_SPI_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000800:	f7ff fe7b 	bl	80004fa <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000804:	bf00      	nop
 8000806:	bd80      	pop	{r7, pc}
 8000808:	200004ac 	.word	0x200004ac
 800080c:	40013000 	.word	0x40013000

08000810 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1b      	ldr	r2, [pc, #108]	@ (8000898 <HAL_SPI_MspInit+0x88>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d12f      	bne.n	8000890 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000830:	4b1a      	ldr	r3, [pc, #104]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	4a19      	ldr	r2, [pc, #100]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 8000836:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800083a:	6193      	str	r3, [r2, #24]
 800083c:	4b17      	ldr	r3, [pc, #92]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000848:	4b14      	ldr	r3, [pc, #80]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a13      	ldr	r2, [pc, #76]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 800084e:	f043 0304 	orr.w	r3, r3, #4
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b11      	ldr	r3, [pc, #68]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0304 	and.w	r3, r3, #4
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000860:	23a0      	movs	r3, #160	@ 0xa0
 8000862:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000864:	2302      	movs	r3, #2
 8000866:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000868:	2303      	movs	r3, #3
 800086a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480b      	ldr	r0, [pc, #44]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 8000874:	f000 fc60 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000878:	2340      	movs	r3, #64	@ 0x40
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4805      	ldr	r0, [pc, #20]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 800088c:	f000 fc54 	bl	8001138 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000890:	bf00      	nop
 8000892:	3720      	adds	r7, #32
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	40013000 	.word	0x40013000
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008aa:	4b15      	ldr	r3, [pc, #84]	@ (8000900 <HAL_MspInit+0x5c>)
 80008ac:	699b      	ldr	r3, [r3, #24]
 80008ae:	4a14      	ldr	r2, [pc, #80]	@ (8000900 <HAL_MspInit+0x5c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6193      	str	r3, [r2, #24]
 80008b6:	4b12      	ldr	r3, [pc, #72]	@ (8000900 <HAL_MspInit+0x5c>)
 80008b8:	699b      	ldr	r3, [r3, #24]
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000900 <HAL_MspInit+0x5c>)
 80008c4:	69db      	ldr	r3, [r3, #28]
 80008c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000900 <HAL_MspInit+0x5c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008cc:	61d3      	str	r3, [r2, #28]
 80008ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000900 <HAL_MspInit+0x5c>)
 80008d0:	69db      	ldr	r3, [r3, #28]
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80008da:	4b0a      	ldr	r3, [pc, #40]	@ (8000904 <HAL_MspInit+0x60>)
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80008ee:	60fb      	str	r3, [r7, #12]
 80008f0:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <HAL_MspInit+0x60>)
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bc80      	pop	{r7}
 80008fe:	4770      	bx	lr
 8000900:	40021000 	.word	0x40021000
 8000904:	40010000 	.word	0x40010000

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	bf00      	nop
 800090e:	e7fd      	b.n	800090c <NMI_Handler+0x4>

08000910 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000914:	bf00      	nop
 8000916:	e7fd      	b.n	8000914 <HardFault_Handler+0x4>

08000918 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800091c:	bf00      	nop
 800091e:	e7fd      	b.n	800091c <MemManage_Handler+0x4>

08000920 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000924:	bf00      	nop
 8000926:	e7fd      	b.n	8000924 <BusFault_Handler+0x4>

08000928 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800092c:	bf00      	nop
 800092e:	e7fd      	b.n	800092c <UsageFault_Handler+0x4>

08000930 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	bc80      	pop	{r7}
 800093a:	4770      	bx	lr

0800093c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000940:	bf00      	nop
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000958:	f000 f982 	bl	8000c60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	bd80      	pop	{r7, pc}

08000960 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000964:	4802      	ldr	r0, [pc, #8]	@ (8000970 <USART1_IRQHandler+0x10>)
 8000966:	f001 feab 	bl	80026c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000504 	.word	0x20000504

08000974 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000978:	4802      	ldr	r0, [pc, #8]	@ (8000984 <USART2_IRQHandler+0x10>)
 800097a:	f001 fea1 	bl	80026c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	2000054c 	.word	0x2000054c

08000988 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800098c:	bf00      	nop
 800098e:	46bd      	mov	sp, r7
 8000990:	bc80      	pop	{r7}
 8000992:	4770      	bx	lr

08000994 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000998:	4b11      	ldr	r3, [pc, #68]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 800099a:	4a12      	ldr	r2, [pc, #72]	@ (80009e4 <MX_USART1_UART_Init+0x50>)
 800099c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800099e:	4b10      	ldr	r3, [pc, #64]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009a6:	4b0e      	ldr	r3, [pc, #56]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009ac:	4b0c      	ldr	r3, [pc, #48]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009b8:	4b09      	ldr	r3, [pc, #36]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009ba:	220c      	movs	r2, #12
 80009bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009be:	4b08      	ldr	r3, [pc, #32]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009c4:	4b06      	ldr	r3, [pc, #24]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ca:	4805      	ldr	r0, [pc, #20]	@ (80009e0 <MX_USART1_UART_Init+0x4c>)
 80009cc:	f001 fe28 	bl	8002620 <HAL_UART_Init>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009d6:	f7ff fd90 	bl	80004fa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000504 	.word	0x20000504
 80009e4:	40013800 	.word	0x40013800

080009e8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009ec:	4b11      	ldr	r3, [pc, #68]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009ee:	4a12      	ldr	r2, [pc, #72]	@ (8000a38 <MX_USART2_UART_Init+0x50>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80009f2:	4b10      	ldr	r3, [pc, #64]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80009f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b06      	ldr	r3, [pc, #24]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	@ (8000a34 <MX_USART2_UART_Init+0x4c>)
 8000a20:	f001 fdfe 	bl	8002620 <HAL_UART_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000a2a:	f7ff fd66 	bl	80004fa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000054c 	.word	0x2000054c
 8000a38:	40004400 	.word	0x40004400

08000a3c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08c      	sub	sp, #48	@ 0x30
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a44:	f107 031c 	add.w	r3, r7, #28
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a46      	ldr	r2, [pc, #280]	@ (8000b70 <HAL_UART_MspInit+0x134>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d13a      	bne.n	8000ad2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a5c:	4b45      	ldr	r3, [pc, #276]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000a5e:	699b      	ldr	r3, [r3, #24]
 8000a60:	4a44      	ldr	r2, [pc, #272]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000a62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a66:	6193      	str	r3, [r2, #24]
 8000a68:	4b42      	ldr	r3, [pc, #264]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000a6a:	699b      	ldr	r3, [r3, #24]
 8000a6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a70:	61bb      	str	r3, [r7, #24]
 8000a72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a74:	4b3f      	ldr	r3, [pc, #252]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000a76:	699b      	ldr	r3, [r3, #24]
 8000a78:	4a3e      	ldr	r2, [pc, #248]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000a7a:	f043 0304 	orr.w	r3, r3, #4
 8000a7e:	6193      	str	r3, [r2, #24]
 8000a80:	4b3c      	ldr	r3, [pc, #240]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	f003 0304 	and.w	r3, r3, #4
 8000a88:	617b      	str	r3, [r7, #20]
 8000a8a:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = CH340TX_Pin;
 8000a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(CH340TX_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4835      	ldr	r0, [pc, #212]	@ (8000b78 <HAL_UART_MspInit+0x13c>)
 8000aa2:	f000 fb49 	bl	8001138 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CH340RX_Pin;
 8000aa6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000aaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aac:	2300      	movs	r3, #0
 8000aae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(CH340RX_GPIO_Port, &GPIO_InitStruct);
 8000ab4:	f107 031c 	add.w	r3, r7, #28
 8000ab8:	4619      	mov	r1, r3
 8000aba:	482f      	ldr	r0, [pc, #188]	@ (8000b78 <HAL_UART_MspInit+0x13c>)
 8000abc:	f000 fb3c 	bl	8001138 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	2025      	movs	r0, #37	@ 0x25
 8000ac6:	f000 f9be 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000aca:	2025      	movs	r0, #37	@ 0x25
 8000acc:	f000 f9d7 	bl	8000e7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ad0:	e04a      	b.n	8000b68 <HAL_UART_MspInit+0x12c>
  else if(uartHandle->Instance==USART2)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a29      	ldr	r2, [pc, #164]	@ (8000b7c <HAL_UART_MspInit+0x140>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d145      	bne.n	8000b68 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000adc:	4b25      	ldr	r3, [pc, #148]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000ade:	69db      	ldr	r3, [r3, #28]
 8000ae0:	4a24      	ldr	r2, [pc, #144]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000ae2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ae6:	61d3      	str	r3, [r2, #28]
 8000ae8:	4b22      	ldr	r3, [pc, #136]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000aea:	69db      	ldr	r3, [r3, #28]
 8000aec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000af6:	699b      	ldr	r3, [r3, #24]
 8000af8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000afa:	f043 0320 	orr.w	r3, r3, #32
 8000afe:	6193      	str	r3, [r2, #24]
 8000b00:	4b1c      	ldr	r3, [pc, #112]	@ (8000b74 <HAL_UART_MspInit+0x138>)
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0320 	and.w	r3, r3, #32
 8000b08:	60fb      	str	r3, [r7, #12]
 8000b0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BLE_TX_Pin;
 8000b0c:	2320      	movs	r3, #32
 8000b0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b10:	2302      	movs	r3, #2
 8000b12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(BLE_TX_GPIO_Port, &GPIO_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4818      	ldr	r0, [pc, #96]	@ (8000b80 <HAL_UART_MspInit+0x144>)
 8000b20:	f000 fb0a 	bl	8001138 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = BLE_RX_Pin;
 8000b24:	2340      	movs	r3, #64	@ 0x40
 8000b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BLE_RX_GPIO_Port, &GPIO_InitStruct);
 8000b30:	f107 031c 	add.w	r3, r7, #28
 8000b34:	4619      	mov	r1, r3
 8000b36:	4812      	ldr	r0, [pc, #72]	@ (8000b80 <HAL_UART_MspInit+0x144>)
 8000b38:	f000 fafe 	bl	8001138 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART2_ENABLE();
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <HAL_UART_MspInit+0x148>)
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b44:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b52:	4a0c      	ldr	r2, [pc, #48]	@ (8000b84 <HAL_UART_MspInit+0x148>)
 8000b54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b56:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	2026      	movs	r0, #38	@ 0x26
 8000b5e:	f000 f972 	bl	8000e46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b62:	2026      	movs	r0, #38	@ 0x26
 8000b64:	f000 f98b 	bl	8000e7e <HAL_NVIC_EnableIRQ>
}
 8000b68:	bf00      	nop
 8000b6a:	3730      	adds	r7, #48	@ 0x30
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40013800 	.word	0x40013800
 8000b74:	40021000 	.word	0x40021000
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	40004400 	.word	0x40004400
 8000b80:	40011400 	.word	0x40011400
 8000b84:	40010000 	.word	0x40010000

08000b88 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b88:	f7ff fefe 	bl	8000988 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b8c:	480b      	ldr	r0, [pc, #44]	@ (8000bbc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b8e:	490c      	ldr	r1, [pc, #48]	@ (8000bc0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b90:	4a0c      	ldr	r2, [pc, #48]	@ (8000bc4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b94:	e002      	b.n	8000b9c <LoopCopyDataInit>

08000b96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9a:	3304      	adds	r3, #4

08000b9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba0:	d3f9      	bcc.n	8000b96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba2:	4a09      	ldr	r2, [pc, #36]	@ (8000bc8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ba4:	4c09      	ldr	r4, [pc, #36]	@ (8000bcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ba6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba8:	e001      	b.n	8000bae <LoopFillZerobss>

08000baa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000baa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bac:	3204      	adds	r2, #4

08000bae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb0:	d3fb      	bcc.n	8000baa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bb2:	f002 fa6f 	bl	8003094 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb6:	f7ff fc25 	bl	8000404 <main>
  bx lr
 8000bba:	4770      	bx	lr
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	2000040c 	.word	0x2000040c
  ldr r2, =_sidata
 8000bc4:	08003128 	.word	0x08003128
  ldr r2, =_sbss
 8000bc8:	2000040c 	.word	0x2000040c
  ldr r4, =_ebss
 8000bcc:	20000598 	.word	0x20000598

08000bd0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <ADC1_2_IRQHandler>
	...

08000bd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bd8:	4b08      	ldr	r3, [pc, #32]	@ (8000bfc <HAL_Init+0x28>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a07      	ldr	r2, [pc, #28]	@ (8000bfc <HAL_Init+0x28>)
 8000bde:	f043 0310 	orr.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000be4:	2003      	movs	r0, #3
 8000be6:	f000 f923 	bl	8000e30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bea:	200f      	movs	r0, #15
 8000bec:	f000 f808 	bl	8000c00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf0:	f7ff fe58 	bl	80008a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40022000 	.word	0x40022000

08000c00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c08:	4b12      	ldr	r3, [pc, #72]	@ (8000c54 <HAL_InitTick+0x54>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	4b12      	ldr	r3, [pc, #72]	@ (8000c58 <HAL_InitTick+0x58>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	4619      	mov	r1, r3
 8000c12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f000 f93b 	bl	8000e9a <HAL_SYSTICK_Config>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	e00e      	b.n	8000c4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d80a      	bhi.n	8000c4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f903 	bl	8000e46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c40:	4a06      	ldr	r2, [pc, #24]	@ (8000c5c <HAL_InitTick+0x5c>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c46:	2300      	movs	r3, #0
 8000c48:	e000      	b.n	8000c4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3708      	adds	r7, #8
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000400 	.word	0x20000400
 8000c58:	20000408 	.word	0x20000408
 8000c5c:	20000404 	.word	0x20000404

08000c60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c64:	4b05      	ldr	r3, [pc, #20]	@ (8000c7c <HAL_IncTick+0x1c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	4b05      	ldr	r3, [pc, #20]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4413      	add	r3, r2
 8000c70:	4a03      	ldr	r2, [pc, #12]	@ (8000c80 <HAL_IncTick+0x20>)
 8000c72:	6013      	str	r3, [r2, #0]
}
 8000c74:	bf00      	nop
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	20000408 	.word	0x20000408
 8000c80:	20000594 	.word	0x20000594

08000c84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return uwTick;
 8000c88:	4b02      	ldr	r3, [pc, #8]	@ (8000c94 <HAL_GetTick+0x10>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr
 8000c94:	20000594 	.word	0x20000594

08000c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <__NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bc80      	pop	{r7}
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	@ (8000cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bc80      	pop	{r7}
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db0b      	blt.n	8000d26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	f003 021f 	and.w	r2, r3, #31
 8000d14:	4906      	ldr	r1, [pc, #24]	@ (8000d30 <__NVIC_EnableIRQ+0x34>)
 8000d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1a:	095b      	lsrs	r3, r3, #5
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr
 8000d30:	e000e100 	.word	0xe000e100

08000d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	6039      	str	r1, [r7, #0]
 8000d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	db0a      	blt.n	8000d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	490c      	ldr	r1, [pc, #48]	@ (8000d80 <__NVIC_SetPriority+0x4c>)
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	0112      	lsls	r2, r2, #4
 8000d54:	b2d2      	uxtb	r2, r2
 8000d56:	440b      	add	r3, r1
 8000d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d5c:	e00a      	b.n	8000d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	4908      	ldr	r1, [pc, #32]	@ (8000d84 <__NVIC_SetPriority+0x50>)
 8000d64:	79fb      	ldrb	r3, [r7, #7]
 8000d66:	f003 030f 	and.w	r3, r3, #15
 8000d6a:	3b04      	subs	r3, #4
 8000d6c:	0112      	lsls	r2, r2, #4
 8000d6e:	b2d2      	uxtb	r2, r2
 8000d70:	440b      	add	r3, r1
 8000d72:	761a      	strb	r2, [r3, #24]
}
 8000d74:	bf00      	nop
 8000d76:	370c      	adds	r7, #12
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	@ 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	60f8      	str	r0, [r7, #12]
 8000d90:	60b9      	str	r1, [r7, #8]
 8000d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	f003 0307 	and.w	r3, r3, #7
 8000d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f1c3 0307 	rsb	r3, r3, #7
 8000da2:	2b04      	cmp	r3, #4
 8000da4:	bf28      	it	cs
 8000da6:	2304      	movcs	r3, #4
 8000da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	3304      	adds	r3, #4
 8000dae:	2b06      	cmp	r3, #6
 8000db0:	d902      	bls.n	8000db8 <NVIC_EncodePriority+0x30>
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3b03      	subs	r3, #3
 8000db6:	e000      	b.n	8000dba <NVIC_EncodePriority+0x32>
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43da      	mvns	r2, r3
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	401a      	ands	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dda:	43d9      	mvns	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	4313      	orrs	r3, r2
         );
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3724      	adds	r7, #36	@ 0x24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bc80      	pop	{r7}
 8000dea:	4770      	bx	lr

08000dec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	3b01      	subs	r3, #1
 8000df8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000dfc:	d301      	bcc.n	8000e02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dfe:	2301      	movs	r3, #1
 8000e00:	e00f      	b.n	8000e22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e02:	4a0a      	ldr	r2, [pc, #40]	@ (8000e2c <SysTick_Config+0x40>)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e10:	f7ff ff90 	bl	8000d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e14:	4b05      	ldr	r3, [pc, #20]	@ (8000e2c <SysTick_Config+0x40>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e1a:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <SysTick_Config+0x40>)
 8000e1c:	2207      	movs	r2, #7
 8000e1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	e000e010 	.word	0xe000e010

08000e30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff ff2d 	bl	8000c98 <__NVIC_SetPriorityGrouping>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b086      	sub	sp, #24
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	60b9      	str	r1, [r7, #8]
 8000e50:	607a      	str	r2, [r7, #4]
 8000e52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e58:	f7ff ff42 	bl	8000ce0 <__NVIC_GetPriorityGrouping>
 8000e5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e5e:	687a      	ldr	r2, [r7, #4]
 8000e60:	68b9      	ldr	r1, [r7, #8]
 8000e62:	6978      	ldr	r0, [r7, #20]
 8000e64:	f7ff ff90 	bl	8000d88 <NVIC_EncodePriority>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e6e:	4611      	mov	r1, r2
 8000e70:	4618      	mov	r0, r3
 8000e72:	f7ff ff5f 	bl	8000d34 <__NVIC_SetPriority>
}
 8000e76:	bf00      	nop
 8000e78:	3718      	adds	r7, #24
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}

08000e7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e7e:	b580      	push	{r7, lr}
 8000e80:	b082      	sub	sp, #8
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	4603      	mov	r3, r0
 8000e86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f7ff ff35 	bl	8000cfc <__NVIC_EnableIRQ>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b082      	sub	sp, #8
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ffa2 	bl	8000dec <SysTick_Config>
 8000ea8:	4603      	mov	r3, r0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b085      	sub	sp, #20
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d008      	beq.n	8000edc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2204      	movs	r2, #4
 8000ece:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	e020      	b.n	8000f1e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020e 	bic.w	r2, r2, #14
 8000eea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f022 0201 	bic.w	r2, r2, #1
 8000efa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f04:	2101      	movs	r1, #1
 8000f06:	fa01 f202 	lsl.w	r2, r1, r2
 8000f0a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	2201      	movs	r2, #1
 8000f10:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f30:	2300      	movs	r3, #0
 8000f32:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d005      	beq.n	8000f4c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	2204      	movs	r2, #4
 8000f44:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
 8000f48:	73fb      	strb	r3, [r7, #15]
 8000f4a:	e0d6      	b.n	80010fa <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f022 020e 	bic.w	r2, r2, #14
 8000f5a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f022 0201 	bic.w	r2, r2, #1
 8000f6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b64      	ldr	r3, [pc, #400]	@ (8001104 <HAL_DMA_Abort_IT+0x1dc>)
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d958      	bls.n	800102a <HAL_DMA_Abort_IT+0x102>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a62      	ldr	r2, [pc, #392]	@ (8001108 <HAL_DMA_Abort_IT+0x1e0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d04f      	beq.n	8001022 <HAL_DMA_Abort_IT+0xfa>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	4a61      	ldr	r2, [pc, #388]	@ (800110c <HAL_DMA_Abort_IT+0x1e4>)
 8000f88:	4293      	cmp	r3, r2
 8000f8a:	d048      	beq.n	800101e <HAL_DMA_Abort_IT+0xf6>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a5f      	ldr	r2, [pc, #380]	@ (8001110 <HAL_DMA_Abort_IT+0x1e8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d040      	beq.n	8001018 <HAL_DMA_Abort_IT+0xf0>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a5e      	ldr	r2, [pc, #376]	@ (8001114 <HAL_DMA_Abort_IT+0x1ec>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d038      	beq.n	8001012 <HAL_DMA_Abort_IT+0xea>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a5c      	ldr	r2, [pc, #368]	@ (8001118 <HAL_DMA_Abort_IT+0x1f0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d030      	beq.n	800100c <HAL_DMA_Abort_IT+0xe4>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a5b      	ldr	r2, [pc, #364]	@ (800111c <HAL_DMA_Abort_IT+0x1f4>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d028      	beq.n	8001006 <HAL_DMA_Abort_IT+0xde>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a52      	ldr	r2, [pc, #328]	@ (8001104 <HAL_DMA_Abort_IT+0x1dc>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d020      	beq.n	8001000 <HAL_DMA_Abort_IT+0xd8>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4a57      	ldr	r2, [pc, #348]	@ (8001120 <HAL_DMA_Abort_IT+0x1f8>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d019      	beq.n	8000ffc <HAL_DMA_Abort_IT+0xd4>
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a55      	ldr	r2, [pc, #340]	@ (8001124 <HAL_DMA_Abort_IT+0x1fc>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d012      	beq.n	8000ff8 <HAL_DMA_Abort_IT+0xd0>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a54      	ldr	r2, [pc, #336]	@ (8001128 <HAL_DMA_Abort_IT+0x200>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d00a      	beq.n	8000ff2 <HAL_DMA_Abort_IT+0xca>
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a52      	ldr	r2, [pc, #328]	@ (800112c <HAL_DMA_Abort_IT+0x204>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d102      	bne.n	8000fec <HAL_DMA_Abort_IT+0xc4>
 8000fe6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fea:	e01b      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8000fec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ff0:	e018      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8000ff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ff6:	e015      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	e013      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e011      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8001000:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001004:	e00e      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8001006:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800100a:	e00b      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 800100c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001010:	e008      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8001012:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001016:	e005      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8001018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101c:	e002      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 800101e:	2310      	movs	r3, #16
 8001020:	e000      	b.n	8001024 <HAL_DMA_Abort_IT+0xfc>
 8001022:	2301      	movs	r3, #1
 8001024:	4a42      	ldr	r2, [pc, #264]	@ (8001130 <HAL_DMA_Abort_IT+0x208>)
 8001026:	6053      	str	r3, [r2, #4]
 8001028:	e057      	b.n	80010da <HAL_DMA_Abort_IT+0x1b2>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a36      	ldr	r2, [pc, #216]	@ (8001108 <HAL_DMA_Abort_IT+0x1e0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d04f      	beq.n	80010d4 <HAL_DMA_Abort_IT+0x1ac>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a34      	ldr	r2, [pc, #208]	@ (800110c <HAL_DMA_Abort_IT+0x1e4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d048      	beq.n	80010d0 <HAL_DMA_Abort_IT+0x1a8>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4a33      	ldr	r2, [pc, #204]	@ (8001110 <HAL_DMA_Abort_IT+0x1e8>)
 8001044:	4293      	cmp	r3, r2
 8001046:	d040      	beq.n	80010ca <HAL_DMA_Abort_IT+0x1a2>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a31      	ldr	r2, [pc, #196]	@ (8001114 <HAL_DMA_Abort_IT+0x1ec>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d038      	beq.n	80010c4 <HAL_DMA_Abort_IT+0x19c>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a30      	ldr	r2, [pc, #192]	@ (8001118 <HAL_DMA_Abort_IT+0x1f0>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d030      	beq.n	80010be <HAL_DMA_Abort_IT+0x196>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a2e      	ldr	r2, [pc, #184]	@ (800111c <HAL_DMA_Abort_IT+0x1f4>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d028      	beq.n	80010b8 <HAL_DMA_Abort_IT+0x190>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a26      	ldr	r2, [pc, #152]	@ (8001104 <HAL_DMA_Abort_IT+0x1dc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d020      	beq.n	80010b2 <HAL_DMA_Abort_IT+0x18a>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a2a      	ldr	r2, [pc, #168]	@ (8001120 <HAL_DMA_Abort_IT+0x1f8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d019      	beq.n	80010ae <HAL_DMA_Abort_IT+0x186>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a29      	ldr	r2, [pc, #164]	@ (8001124 <HAL_DMA_Abort_IT+0x1fc>)
 8001080:	4293      	cmp	r3, r2
 8001082:	d012      	beq.n	80010aa <HAL_DMA_Abort_IT+0x182>
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a27      	ldr	r2, [pc, #156]	@ (8001128 <HAL_DMA_Abort_IT+0x200>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d00a      	beq.n	80010a4 <HAL_DMA_Abort_IT+0x17c>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a26      	ldr	r2, [pc, #152]	@ (800112c <HAL_DMA_Abort_IT+0x204>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d102      	bne.n	800109e <HAL_DMA_Abort_IT+0x176>
 8001098:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109c:	e01b      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 800109e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010a2:	e018      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010a8:	e015      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010aa:	2310      	movs	r3, #16
 80010ac:	e013      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e011      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010b2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80010b6:	e00e      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80010bc:	e00b      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80010c2:	e008      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010c8:	e005      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010ce:	e002      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010d0:	2310      	movs	r3, #16
 80010d2:	e000      	b.n	80010d6 <HAL_DMA_Abort_IT+0x1ae>
 80010d4:	2301      	movs	r3, #1
 80010d6:	4a17      	ldr	r2, [pc, #92]	@ (8001134 <HAL_DMA_Abort_IT+0x20c>)
 80010d8:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	4798      	blx	r3
    } 
  }
  return status;
 80010fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80010fc:	4618      	mov	r0, r3
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40020080 	.word	0x40020080
 8001108:	40020008 	.word	0x40020008
 800110c:	4002001c 	.word	0x4002001c
 8001110:	40020030 	.word	0x40020030
 8001114:	40020044 	.word	0x40020044
 8001118:	40020058 	.word	0x40020058
 800111c:	4002006c 	.word	0x4002006c
 8001120:	40020408 	.word	0x40020408
 8001124:	4002041c 	.word	0x4002041c
 8001128:	40020430 	.word	0x40020430
 800112c:	40020444 	.word	0x40020444
 8001130:	40020400 	.word	0x40020400
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001138:	b480      	push	{r7}
 800113a:	b08b      	sub	sp, #44	@ 0x2c
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
 8001140:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	e179      	b.n	8001440 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800114c:	2201      	movs	r2, #1
 800114e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	69fa      	ldr	r2, [r7, #28]
 800115c:	4013      	ands	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	429a      	cmp	r2, r3
 8001166:	f040 8168 	bne.w	800143a <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	4a96      	ldr	r2, [pc, #600]	@ (80013c8 <HAL_GPIO_Init+0x290>)
 8001170:	4293      	cmp	r3, r2
 8001172:	d05e      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001174:	4a94      	ldr	r2, [pc, #592]	@ (80013c8 <HAL_GPIO_Init+0x290>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d875      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 800117a:	4a94      	ldr	r2, [pc, #592]	@ (80013cc <HAL_GPIO_Init+0x294>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d058      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001180:	4a92      	ldr	r2, [pc, #584]	@ (80013cc <HAL_GPIO_Init+0x294>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d86f      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 8001186:	4a92      	ldr	r2, [pc, #584]	@ (80013d0 <HAL_GPIO_Init+0x298>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d052      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 800118c:	4a90      	ldr	r2, [pc, #576]	@ (80013d0 <HAL_GPIO_Init+0x298>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d869      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 8001192:	4a90      	ldr	r2, [pc, #576]	@ (80013d4 <HAL_GPIO_Init+0x29c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d04c      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 8001198:	4a8e      	ldr	r2, [pc, #568]	@ (80013d4 <HAL_GPIO_Init+0x29c>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d863      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 800119e:	4a8e      	ldr	r2, [pc, #568]	@ (80013d8 <HAL_GPIO_Init+0x2a0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d046      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
 80011a4:	4a8c      	ldr	r2, [pc, #560]	@ (80013d8 <HAL_GPIO_Init+0x2a0>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d85d      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d82a      	bhi.n	8001204 <HAL_GPIO_Init+0xcc>
 80011ae:	2b12      	cmp	r3, #18
 80011b0:	d859      	bhi.n	8001266 <HAL_GPIO_Init+0x12e>
 80011b2:	a201      	add	r2, pc, #4	@ (adr r2, 80011b8 <HAL_GPIO_Init+0x80>)
 80011b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b8:	08001233 	.word	0x08001233
 80011bc:	0800120d 	.word	0x0800120d
 80011c0:	0800121f 	.word	0x0800121f
 80011c4:	08001261 	.word	0x08001261
 80011c8:	08001267 	.word	0x08001267
 80011cc:	08001267 	.word	0x08001267
 80011d0:	08001267 	.word	0x08001267
 80011d4:	08001267 	.word	0x08001267
 80011d8:	08001267 	.word	0x08001267
 80011dc:	08001267 	.word	0x08001267
 80011e0:	08001267 	.word	0x08001267
 80011e4:	08001267 	.word	0x08001267
 80011e8:	08001267 	.word	0x08001267
 80011ec:	08001267 	.word	0x08001267
 80011f0:	08001267 	.word	0x08001267
 80011f4:	08001267 	.word	0x08001267
 80011f8:	08001267 	.word	0x08001267
 80011fc:	08001215 	.word	0x08001215
 8001200:	08001229 	.word	0x08001229
 8001204:	4a75      	ldr	r2, [pc, #468]	@ (80013dc <HAL_GPIO_Init+0x2a4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d013      	beq.n	8001232 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800120a:	e02c      	b.n	8001266 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	68db      	ldr	r3, [r3, #12]
 8001210:	623b      	str	r3, [r7, #32]
          break;
 8001212:	e029      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	3304      	adds	r3, #4
 800121a:	623b      	str	r3, [r7, #32]
          break;
 800121c:	e024      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	68db      	ldr	r3, [r3, #12]
 8001222:	3308      	adds	r3, #8
 8001224:	623b      	str	r3, [r7, #32]
          break;
 8001226:	e01f      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68db      	ldr	r3, [r3, #12]
 800122c:	330c      	adds	r3, #12
 800122e:	623b      	str	r3, [r7, #32]
          break;
 8001230:	e01a      	b.n	8001268 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d102      	bne.n	8001240 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800123a:	2304      	movs	r3, #4
 800123c:	623b      	str	r3, [r7, #32]
          break;
 800123e:	e013      	b.n	8001268 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d105      	bne.n	8001254 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001248:	2308      	movs	r3, #8
 800124a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	69fa      	ldr	r2, [r7, #28]
 8001250:	611a      	str	r2, [r3, #16]
          break;
 8001252:	e009      	b.n	8001268 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001254:	2308      	movs	r3, #8
 8001256:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69fa      	ldr	r2, [r7, #28]
 800125c:	615a      	str	r2, [r3, #20]
          break;
 800125e:	e003      	b.n	8001268 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001260:	2300      	movs	r3, #0
 8001262:	623b      	str	r3, [r7, #32]
          break;
 8001264:	e000      	b.n	8001268 <HAL_GPIO_Init+0x130>
          break;
 8001266:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2bff      	cmp	r3, #255	@ 0xff
 800126c:	d801      	bhi.n	8001272 <HAL_GPIO_Init+0x13a>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	e001      	b.n	8001276 <HAL_GPIO_Init+0x13e>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3304      	adds	r3, #4
 8001276:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2bff      	cmp	r3, #255	@ 0xff
 800127c:	d802      	bhi.n	8001284 <HAL_GPIO_Init+0x14c>
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	e002      	b.n	800128a <HAL_GPIO_Init+0x152>
 8001284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001286:	3b08      	subs	r3, #8
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	210f      	movs	r1, #15
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	fa01 f303 	lsl.w	r3, r1, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	401a      	ands	r2, r3
 800129c:	6a39      	ldr	r1, [r7, #32]
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	431a      	orrs	r2, r3
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 80c1 	beq.w	800143a <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012b8:	4b49      	ldr	r3, [pc, #292]	@ (80013e0 <HAL_GPIO_Init+0x2a8>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a48      	ldr	r2, [pc, #288]	@ (80013e0 <HAL_GPIO_Init+0x2a8>)
 80012be:	f043 0301 	orr.w	r3, r3, #1
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b46      	ldr	r3, [pc, #280]	@ (80013e0 <HAL_GPIO_Init+0x2a8>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0301 	and.w	r3, r3, #1
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012d0:	4a44      	ldr	r2, [pc, #272]	@ (80013e4 <HAL_GPIO_Init+0x2ac>)
 80012d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012d4:	089b      	lsrs	r3, r3, #2
 80012d6:	3302      	adds	r3, #2
 80012d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012dc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	220f      	movs	r2, #15
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a3c      	ldr	r2, [pc, #240]	@ (80013e8 <HAL_GPIO_Init+0x2b0>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d01f      	beq.n	800133c <HAL_GPIO_Init+0x204>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a3b      	ldr	r2, [pc, #236]	@ (80013ec <HAL_GPIO_Init+0x2b4>)
 8001300:	4293      	cmp	r3, r2
 8001302:	d019      	beq.n	8001338 <HAL_GPIO_Init+0x200>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4a3a      	ldr	r2, [pc, #232]	@ (80013f0 <HAL_GPIO_Init+0x2b8>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d013      	beq.n	8001334 <HAL_GPIO_Init+0x1fc>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a39      	ldr	r2, [pc, #228]	@ (80013f4 <HAL_GPIO_Init+0x2bc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	d00d      	beq.n	8001330 <HAL_GPIO_Init+0x1f8>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a38      	ldr	r2, [pc, #224]	@ (80013f8 <HAL_GPIO_Init+0x2c0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d007      	beq.n	800132c <HAL_GPIO_Init+0x1f4>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a37      	ldr	r2, [pc, #220]	@ (80013fc <HAL_GPIO_Init+0x2c4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d101      	bne.n	8001328 <HAL_GPIO_Init+0x1f0>
 8001324:	2305      	movs	r3, #5
 8001326:	e00a      	b.n	800133e <HAL_GPIO_Init+0x206>
 8001328:	2306      	movs	r3, #6
 800132a:	e008      	b.n	800133e <HAL_GPIO_Init+0x206>
 800132c:	2304      	movs	r3, #4
 800132e:	e006      	b.n	800133e <HAL_GPIO_Init+0x206>
 8001330:	2303      	movs	r3, #3
 8001332:	e004      	b.n	800133e <HAL_GPIO_Init+0x206>
 8001334:	2302      	movs	r3, #2
 8001336:	e002      	b.n	800133e <HAL_GPIO_Init+0x206>
 8001338:	2301      	movs	r3, #1
 800133a:	e000      	b.n	800133e <HAL_GPIO_Init+0x206>
 800133c:	2300      	movs	r3, #0
 800133e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001340:	f002 0203 	and.w	r2, r2, #3
 8001344:	0092      	lsls	r2, r2, #2
 8001346:	4093      	lsls	r3, r2
 8001348:	68fa      	ldr	r2, [r7, #12]
 800134a:	4313      	orrs	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800134e:	4925      	ldr	r1, [pc, #148]	@ (80013e4 <HAL_GPIO_Init+0x2ac>)
 8001350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001352:	089b      	lsrs	r3, r3, #2
 8001354:	3302      	adds	r3, #2
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001368:	4b25      	ldr	r3, [pc, #148]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	4924      	ldr	r1, [pc, #144]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	608b      	str	r3, [r1, #8]
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001376:	4b22      	ldr	r3, [pc, #136]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	43db      	mvns	r3, r3
 800137e:	4920      	ldr	r1, [pc, #128]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 8001380:	4013      	ands	r3, r2
 8001382:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800138c:	2b00      	cmp	r3, #0
 800138e:	d006      	beq.n	800139e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001390:	4b1b      	ldr	r3, [pc, #108]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	491a      	ldr	r1, [pc, #104]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 8001396:	69bb      	ldr	r3, [r7, #24]
 8001398:	4313      	orrs	r3, r2
 800139a:	60cb      	str	r3, [r1, #12]
 800139c:	e006      	b.n	80013ac <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800139e:	4b18      	ldr	r3, [pc, #96]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 80013a0:	68da      	ldr	r2, [r3, #12]
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	4916      	ldr	r1, [pc, #88]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 80013a8:	4013      	ands	r3, r2
 80013aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d025      	beq.n	8001404 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80013b8:	4b11      	ldr	r3, [pc, #68]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	4910      	ldr	r1, [pc, #64]	@ (8001400 <HAL_GPIO_Init+0x2c8>)
 80013be:	69bb      	ldr	r3, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	604b      	str	r3, [r1, #4]
 80013c4:	e025      	b.n	8001412 <HAL_GPIO_Init+0x2da>
 80013c6:	bf00      	nop
 80013c8:	10320000 	.word	0x10320000
 80013cc:	10310000 	.word	0x10310000
 80013d0:	10220000 	.word	0x10220000
 80013d4:	10210000 	.word	0x10210000
 80013d8:	10120000 	.word	0x10120000
 80013dc:	10110000 	.word	0x10110000
 80013e0:	40021000 	.word	0x40021000
 80013e4:	40010000 	.word	0x40010000
 80013e8:	40010800 	.word	0x40010800
 80013ec:	40010c00 	.word	0x40010c00
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40011400 	.word	0x40011400
 80013f8:	40011800 	.word	0x40011800
 80013fc:	40011c00 	.word	0x40011c00
 8001400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_GPIO_Init+0x324>)
 8001406:	685a      	ldr	r2, [r3, #4]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	43db      	mvns	r3, r3
 800140c:	4913      	ldr	r1, [pc, #76]	@ (800145c <HAL_GPIO_Init+0x324>)
 800140e:	4013      	ands	r3, r2
 8001410:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800141e:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <HAL_GPIO_Init+0x324>)
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	490e      	ldr	r1, [pc, #56]	@ (800145c <HAL_GPIO_Init+0x324>)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
 800142a:	e006      	b.n	800143a <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800142c:	4b0b      	ldr	r3, [pc, #44]	@ (800145c <HAL_GPIO_Init+0x324>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4909      	ldr	r1, [pc, #36]	@ (800145c <HAL_GPIO_Init+0x324>)
 8001436:	4013      	ands	r3, r2
 8001438:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800143a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	f47f ae7e 	bne.w	800114c <HAL_GPIO_Init+0x14>
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	372c      	adds	r7, #44	@ 0x2c
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	611a      	str	r2, [r3, #16]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e171      	b.n	8001786 <HAL_I2C_Init+0x2f6>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d12c      	bne.n	8001508 <HAL_I2C_Init+0x78>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    /* Init the I2C Callback settings */
    hi2c->MasterTxCpltCallback = HAL_I2C_MasterTxCpltCallback; /* Legacy weak MasterTxCpltCallback */
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4a77      	ldr	r2, [pc, #476]	@ (8001698 <HAL_I2C_Init+0x208>)
 80014ba:	655a      	str	r2, [r3, #84]	@ 0x54
    hi2c->MasterRxCpltCallback = HAL_I2C_MasterRxCpltCallback; /* Legacy weak MasterRxCpltCallback */
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a77      	ldr	r2, [pc, #476]	@ (800169c <HAL_I2C_Init+0x20c>)
 80014c0:	659a      	str	r2, [r3, #88]	@ 0x58
    hi2c->SlaveTxCpltCallback  = HAL_I2C_SlaveTxCpltCallback;  /* Legacy weak SlaveTxCpltCallback  */
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a76      	ldr	r2, [pc, #472]	@ (80016a0 <HAL_I2C_Init+0x210>)
 80014c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    hi2c->SlaveRxCpltCallback  = HAL_I2C_SlaveRxCpltCallback;  /* Legacy weak SlaveRxCpltCallback  */
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	4a76      	ldr	r2, [pc, #472]	@ (80016a4 <HAL_I2C_Init+0x214>)
 80014cc:	661a      	str	r2, [r3, #96]	@ 0x60
    hi2c->ListenCpltCallback   = HAL_I2C_ListenCpltCallback;   /* Legacy weak ListenCpltCallback   */
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a75      	ldr	r2, [pc, #468]	@ (80016a8 <HAL_I2C_Init+0x218>)
 80014d2:	665a      	str	r2, [r3, #100]	@ 0x64
    hi2c->MemTxCpltCallback    = HAL_I2C_MemTxCpltCallback;    /* Legacy weak MemTxCpltCallback    */
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	4a75      	ldr	r2, [pc, #468]	@ (80016ac <HAL_I2C_Init+0x21c>)
 80014d8:	669a      	str	r2, [r3, #104]	@ 0x68
    hi2c->MemRxCpltCallback    = HAL_I2C_MemRxCpltCallback;    /* Legacy weak MemRxCpltCallback    */
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4a74      	ldr	r2, [pc, #464]	@ (80016b0 <HAL_I2C_Init+0x220>)
 80014de:	66da      	str	r2, [r3, #108]	@ 0x6c
    hi2c->ErrorCallback        = HAL_I2C_ErrorCallback;        /* Legacy weak ErrorCallback        */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a74      	ldr	r2, [pc, #464]	@ (80016b4 <HAL_I2C_Init+0x224>)
 80014e4:	671a      	str	r2, [r3, #112]	@ 0x70
    hi2c->AbortCpltCallback    = HAL_I2C_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a73      	ldr	r2, [pc, #460]	@ (80016b8 <HAL_I2C_Init+0x228>)
 80014ea:	675a      	str	r2, [r3, #116]	@ 0x74
    hi2c->AddrCallback         = HAL_I2C_AddrCallback;         /* Legacy weak AddrCallback         */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a73      	ldr	r2, [pc, #460]	@ (80016bc <HAL_I2C_Init+0x22c>)
 80014f0:	679a      	str	r2, [r3, #120]	@ 0x78

    if (hi2c->MspInitCallback == NULL)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d102      	bne.n	8001500 <HAL_I2C_Init+0x70>
    {
      hi2c->MspInitCallback = HAL_I2C_MspInit; /* Legacy weak MspInit  */
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a70      	ldr	r2, [pc, #448]	@ (80016c0 <HAL_I2C_Init+0x230>)
 80014fe:	67da      	str	r2, [r3, #124]	@ 0x7c
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8001504:	6878      	ldr	r0, [r7, #4]
 8001506:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2224      	movs	r2, #36	@ 0x24
 800150c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	681a      	ldr	r2, [r3, #0]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f022 0201 	bic.w	r2, r2, #1
 800151e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800152e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800153e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001540:	f000 fd4e 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8001544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	4a5e      	ldr	r2, [pc, #376]	@ (80016c4 <HAL_I2C_Init+0x234>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d807      	bhi.n	8001560 <HAL_I2C_Init+0xd0>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4a5d      	ldr	r2, [pc, #372]	@ (80016c8 <HAL_I2C_Init+0x238>)
 8001554:	4293      	cmp	r3, r2
 8001556:	bf94      	ite	ls
 8001558:	2301      	movls	r3, #1
 800155a:	2300      	movhi	r3, #0
 800155c:	b2db      	uxtb	r3, r3
 800155e:	e006      	b.n	800156e <HAL_I2C_Init+0xde>
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	4a5a      	ldr	r2, [pc, #360]	@ (80016cc <HAL_I2C_Init+0x23c>)
 8001564:	4293      	cmp	r3, r2
 8001566:	bf94      	ite	ls
 8001568:	2301      	movls	r3, #1
 800156a:	2300      	movhi	r3, #0
 800156c:	b2db      	uxtb	r3, r3
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <HAL_I2C_Init+0xe6>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e107      	b.n	8001786 <HAL_I2C_Init+0x2f6>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4a55      	ldr	r2, [pc, #340]	@ (80016d0 <HAL_I2C_Init+0x240>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	0c9b      	lsrs	r3, r3, #18
 8001580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68ba      	ldr	r2, [r7, #8]
 8001592:	430a      	orrs	r2, r1
 8001594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a1b      	ldr	r3, [r3, #32]
 800159c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4a47      	ldr	r2, [pc, #284]	@ (80016c4 <HAL_I2C_Init+0x234>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d802      	bhi.n	80015b0 <HAL_I2C_Init+0x120>
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3301      	adds	r3, #1
 80015ae:	e009      	b.n	80015c4 <HAL_I2C_Init+0x134>
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80015b6:	fb02 f303 	mul.w	r3, r2, r3
 80015ba:	4a46      	ldr	r2, [pc, #280]	@ (80016d4 <HAL_I2C_Init+0x244>)
 80015bc:	fba2 2303 	umull	r2, r3, r2, r3
 80015c0:	099b      	lsrs	r3, r3, #6
 80015c2:	3301      	adds	r3, #1
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	6812      	ldr	r2, [r2, #0]
 80015c8:	430b      	orrs	r3, r1
 80015ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80015d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4939      	ldr	r1, [pc, #228]	@ (80016c4 <HAL_I2C_Init+0x234>)
 80015e0:	428b      	cmp	r3, r1
 80015e2:	d819      	bhi.n	8001618 <HAL_I2C_Init+0x188>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	1e59      	subs	r1, r3, #1
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80015f2:	1c59      	adds	r1, r3, #1
 80015f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80015f8:	400b      	ands	r3, r1
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d00a      	beq.n	8001614 <HAL_I2C_Init+0x184>
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	1e59      	subs	r1, r3, #1
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fbb1 f3f3 	udiv	r3, r1, r3
 800160c:	3301      	adds	r3, #1
 800160e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001612:	e071      	b.n	80016f8 <HAL_I2C_Init+0x268>
 8001614:	2304      	movs	r3, #4
 8001616:	e06f      	b.n	80016f8 <HAL_I2C_Init+0x268>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d111      	bne.n	8001644 <HAL_I2C_Init+0x1b4>
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	1e58      	subs	r0, r3, #1
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6859      	ldr	r1, [r3, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	005b      	lsls	r3, r3, #1
 800162c:	440b      	add	r3, r1
 800162e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001632:	3301      	adds	r3, #1
 8001634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001638:	2b00      	cmp	r3, #0
 800163a:	bf0c      	ite	eq
 800163c:	2301      	moveq	r3, #1
 800163e:	2300      	movne	r3, #0
 8001640:	b2db      	uxtb	r3, r3
 8001642:	e012      	b.n	800166a <HAL_I2C_Init+0x1da>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	1e58      	subs	r0, r3, #1
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6859      	ldr	r1, [r3, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	440b      	add	r3, r1
 8001652:	0099      	lsls	r1, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	fbb0 f3f3 	udiv	r3, r0, r3
 800165a:	3301      	adds	r3, #1
 800165c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf0c      	ite	eq
 8001664:	2301      	moveq	r3, #1
 8001666:	2300      	movne	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <HAL_I2C_Init+0x1e2>
 800166e:	2301      	movs	r3, #1
 8001670:	e042      	b.n	80016f8 <HAL_I2C_Init+0x268>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d12e      	bne.n	80016d8 <HAL_I2C_Init+0x248>
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	1e58      	subs	r0, r3, #1
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6859      	ldr	r1, [r3, #4]
 8001682:	460b      	mov	r3, r1
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	440b      	add	r3, r1
 8001688:	fbb0 f3f3 	udiv	r3, r0, r3
 800168c:	3301      	adds	r3, #1
 800168e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001692:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001696:	e02f      	b.n	80016f8 <HAL_I2C_Init+0x268>
 8001698:	08001791 	.word	0x08001791
 800169c:	080017a3 	.word	0x080017a3
 80016a0:	080017b5 	.word	0x080017b5
 80016a4:	080017c7 	.word	0x080017c7
 80016a8:	080017f3 	.word	0x080017f3
 80016ac:	08001805 	.word	0x08001805
 80016b0:	08001817 	.word	0x08001817
 80016b4:	08001829 	.word	0x08001829
 80016b8:	0800183b 	.word	0x0800183b
 80016bc:	080017d9 	.word	0x080017d9
 80016c0:	08000359 	.word	0x08000359
 80016c4:	000186a0 	.word	0x000186a0
 80016c8:	001e847f 	.word	0x001e847f
 80016cc:	003d08ff 	.word	0x003d08ff
 80016d0:	431bde83 	.word	0x431bde83
 80016d4:	10624dd3 	.word	0x10624dd3
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1e58      	subs	r0, r3, #1
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6859      	ldr	r1, [r3, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	0099      	lsls	r1, r3, #2
 80016e8:	440b      	add	r3, r1
 80016ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80016ee:	3301      	adds	r3, #1
 80016f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016f4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	6809      	ldr	r1, [r1, #0]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69da      	ldr	r2, [r3, #28]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	431a      	orrs	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	430a      	orrs	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001726:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6911      	ldr	r1, [r2, #16]
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	68d2      	ldr	r2, [r2, #12]
 8001732:	4311      	orrs	r1, r2
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	430b      	orrs	r3, r1
 800173a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	695a      	ldr	r2, [r3, #20]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	431a      	orrs	r2, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2220      	movs	r2, #32
 8001772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2200      	movs	r2, #0
 8001780:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop

08001790 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	bc80      	pop	{r7}
 80017a0:	4770      	bx	lr

080017a2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bc80      	pop	{r7}
 80017b2:	4770      	bx	lr

080017b4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b083      	sub	sp, #12
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017c6:	b480      	push	{r7}
 80017c8:	b083      	sub	sp, #12
 80017ca:	af00      	add	r7, sp, #0
 80017cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80017ce:	bf00      	nop
 80017d0:	370c      	adds	r7, #12
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bc80      	pop	{r7}
 80017d6:	4770      	bx	lr

080017d8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
 80017e4:	4613      	mov	r3, r2
 80017e6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001830:	bf00      	nop
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	bc80      	pop	{r7}
 8001838:	4770      	bx	lr

0800183a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800183a:	b480      	push	{r7}
 800183c:	b083      	sub	sp, #12
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b086      	sub	sp, #24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e272      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	f000 8087 	beq.w	800197a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800186c:	4b92      	ldr	r3, [pc, #584]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f003 030c 	and.w	r3, r3, #12
 8001874:	2b04      	cmp	r3, #4
 8001876:	d00c      	beq.n	8001892 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001878:	4b8f      	ldr	r3, [pc, #572]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 030c 	and.w	r3, r3, #12
 8001880:	2b08      	cmp	r3, #8
 8001882:	d112      	bne.n	80018aa <HAL_RCC_OscConfig+0x5e>
 8001884:	4b8c      	ldr	r3, [pc, #560]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800188c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001890:	d10b      	bne.n	80018aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001892:	4b89      	ldr	r3, [pc, #548]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d06c      	beq.n	8001978 <HAL_RCC_OscConfig+0x12c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d168      	bne.n	8001978 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e24c      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b2:	d106      	bne.n	80018c2 <HAL_RCC_OscConfig+0x76>
 80018b4:	4b80      	ldr	r3, [pc, #512]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a7f      	ldr	r2, [pc, #508]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018be:	6013      	str	r3, [r2, #0]
 80018c0:	e02e      	b.n	8001920 <HAL_RCC_OscConfig+0xd4>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x98>
 80018ca:	4b7b      	ldr	r3, [pc, #492]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7a      	ldr	r2, [pc, #488]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b78      	ldr	r3, [pc, #480]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a77      	ldr	r2, [pc, #476]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e01d      	b.n	8001920 <HAL_RCC_OscConfig+0xd4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0xbc>
 80018ee:	4b72      	ldr	r3, [pc, #456]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a71      	ldr	r2, [pc, #452]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018f8:	6013      	str	r3, [r2, #0]
 80018fa:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a6e      	ldr	r2, [pc, #440]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001900:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001904:	6013      	str	r3, [r2, #0]
 8001906:	e00b      	b.n	8001920 <HAL_RCC_OscConfig+0xd4>
 8001908:	4b6b      	ldr	r3, [pc, #428]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a6a      	ldr	r2, [pc, #424]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 800190e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b68      	ldr	r3, [pc, #416]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a67      	ldr	r2, [pc, #412]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 800191a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800191e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d013      	beq.n	8001950 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001928:	f7ff f9ac 	bl	8000c84 <HAL_GetTick>
 800192c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800192e:	e008      	b.n	8001942 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001930:	f7ff f9a8 	bl	8000c84 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b64      	cmp	r3, #100	@ 0x64
 800193c:	d901      	bls.n	8001942 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800193e:	2303      	movs	r3, #3
 8001940:	e200      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001942:	4b5d      	ldr	r3, [pc, #372]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0f0      	beq.n	8001930 <HAL_RCC_OscConfig+0xe4>
 800194e:	e014      	b.n	800197a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001950:	f7ff f998 	bl	8000c84 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001958:	f7ff f994 	bl	8000c84 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b64      	cmp	r3, #100	@ 0x64
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e1ec      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800196a:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x10c>
 8001976:	e000      	b.n	800197a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d063      	beq.n	8001a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001986:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001992:	4b49      	ldr	r3, [pc, #292]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d11c      	bne.n	80019d8 <HAL_RCC_OscConfig+0x18c>
 800199e:	4b46      	ldr	r3, [pc, #280]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d116      	bne.n	80019d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019aa:	4b43      	ldr	r3, [pc, #268]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_OscConfig+0x176>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	691b      	ldr	r3, [r3, #16]
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e1c0      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	00db      	lsls	r3, r3, #3
 80019d0:	4939      	ldr	r1, [pc, #228]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019d6:	e03a      	b.n	8001a4e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d020      	beq.n	8001a22 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019e0:	4b36      	ldr	r3, [pc, #216]	@ (8001abc <HAL_RCC_OscConfig+0x270>)
 80019e2:	2201      	movs	r2, #1
 80019e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e6:	f7ff f94d 	bl	8000c84 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff f949 	bl	8000c84 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e1a1      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a00:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	00db      	lsls	r3, r3, #3
 8001a1a:	4927      	ldr	r1, [pc, #156]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
 8001a20:	e015      	b.n	8001a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b26      	ldr	r3, [pc, #152]	@ (8001abc <HAL_RCC_OscConfig+0x270>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff f92c 	bl	8000c84 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a30:	f7ff f928 	bl	8000c84 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e180      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a42:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d03a      	beq.n	8001ad0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699b      	ldr	r3, [r3, #24]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d019      	beq.n	8001a96 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b17      	ldr	r3, [pc, #92]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a64:	2201      	movs	r2, #1
 8001a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a68:	f7ff f90c 	bl	8000c84 <HAL_GetTick>
 8001a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6e:	e008      	b.n	8001a82 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a70:	f7ff f908 	bl	8000c84 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	2b02      	cmp	r3, #2
 8001a7c:	d901      	bls.n	8001a82 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e160      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a82:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_RCC_OscConfig+0x26c>)
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d0f0      	beq.n	8001a70 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001a8e:	2001      	movs	r0, #1
 8001a90:	f000 face 	bl	8002030 <RCC_Delay>
 8001a94:	e01c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac0 <HAL_RCC_OscConfig+0x274>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a9c:	f7ff f8f2 	bl	8000c84 <HAL_GetTick>
 8001aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa2:	e00f      	b.n	8001ac4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aa4:	f7ff f8ee 	bl	8000c84 <HAL_GetTick>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	1ad3      	subs	r3, r2, r3
 8001aae:	2b02      	cmp	r3, #2
 8001ab0:	d908      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e146      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
 8001ab6:	bf00      	nop
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	42420000 	.word	0x42420000
 8001ac0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ac4:	4b92      	ldr	r3, [pc, #584]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	f003 0302 	and.w	r3, r3, #2
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d1e9      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 80a6 	beq.w	8001c2a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae2:	4b8b      	ldr	r3, [pc, #556]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d10d      	bne.n	8001b0a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	4b88      	ldr	r3, [pc, #544]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a87      	ldr	r2, [pc, #540]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001af4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b85      	ldr	r3, [pc, #532]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b06:	2301      	movs	r3, #1
 8001b08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0a:	4b82      	ldr	r3, [pc, #520]	@ (8001d14 <HAL_RCC_OscConfig+0x4c8>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d118      	bne.n	8001b48 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b16:	4b7f      	ldr	r3, [pc, #508]	@ (8001d14 <HAL_RCC_OscConfig+0x4c8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d14 <HAL_RCC_OscConfig+0x4c8>)
 8001b1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b22:	f7ff f8af 	bl	8000c84 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b2a:	f7ff f8ab 	bl	8000c84 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b64      	cmp	r3, #100	@ 0x64
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e103      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3c:	4b75      	ldr	r3, [pc, #468]	@ (8001d14 <HAL_RCC_OscConfig+0x4c8>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d106      	bne.n	8001b5e <HAL_RCC_OscConfig+0x312>
 8001b50:	4b6f      	ldr	r3, [pc, #444]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4a6e      	ldr	r2, [pc, #440]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b56:	f043 0301 	orr.w	r3, r3, #1
 8001b5a:	6213      	str	r3, [r2, #32]
 8001b5c:	e02d      	b.n	8001bba <HAL_RCC_OscConfig+0x36e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d10c      	bne.n	8001b80 <HAL_RCC_OscConfig+0x334>
 8001b66:	4b6a      	ldr	r3, [pc, #424]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b68:	6a1b      	ldr	r3, [r3, #32]
 8001b6a:	4a69      	ldr	r2, [pc, #420]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b6c:	f023 0301 	bic.w	r3, r3, #1
 8001b70:	6213      	str	r3, [r2, #32]
 8001b72:	4b67      	ldr	r3, [pc, #412]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	4a66      	ldr	r2, [pc, #408]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b78:	f023 0304 	bic.w	r3, r3, #4
 8001b7c:	6213      	str	r3, [r2, #32]
 8001b7e:	e01c      	b.n	8001bba <HAL_RCC_OscConfig+0x36e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	68db      	ldr	r3, [r3, #12]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d10c      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x356>
 8001b88:	4b61      	ldr	r3, [pc, #388]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	4a60      	ldr	r2, [pc, #384]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	6213      	str	r3, [r2, #32]
 8001b94:	4b5e      	ldr	r3, [pc, #376]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4a5d      	ldr	r2, [pc, #372]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	6213      	str	r3, [r2, #32]
 8001ba0:	e00b      	b.n	8001bba <HAL_RCC_OscConfig+0x36e>
 8001ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a5a      	ldr	r2, [pc, #360]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001ba8:	f023 0301 	bic.w	r3, r3, #1
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	4b58      	ldr	r3, [pc, #352]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001bb0:	6a1b      	ldr	r3, [r3, #32]
 8001bb2:	4a57      	ldr	r2, [pc, #348]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	f023 0304 	bic.w	r3, r3, #4
 8001bb8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	68db      	ldr	r3, [r3, #12]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d015      	beq.n	8001bee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc2:	f7ff f85f 	bl	8000c84 <HAL_GetTick>
 8001bc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	e00a      	b.n	8001be0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bca:	f7ff f85b 	bl	8000c84 <HAL_GetTick>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	1ad3      	subs	r3, r2, r3
 8001bd4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d901      	bls.n	8001be0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001bdc:	2303      	movs	r3, #3
 8001bde:	e0b1      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001be0:	4b4b      	ldr	r3, [pc, #300]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ee      	beq.n	8001bca <HAL_RCC_OscConfig+0x37e>
 8001bec:	e014      	b.n	8001c18 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bee:	f7ff f849 	bl	8000c84 <HAL_GetTick>
 8001bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bf4:	e00a      	b.n	8001c0c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf6:	f7ff f845 	bl	8000c84 <HAL_GetTick>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	1ad3      	subs	r3, r2, r3
 8001c00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d901      	bls.n	8001c0c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c08:	2303      	movs	r3, #3
 8001c0a:	e09b      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c0c:	4b40      	ldr	r3, [pc, #256]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c0e:	6a1b      	ldr	r3, [r3, #32]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1ee      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d105      	bne.n	8001c2a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c1e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	4a3b      	ldr	r2, [pc, #236]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c28:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 8087 	beq.w	8001d42 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c34:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	2b08      	cmp	r3, #8
 8001c3e:	d061      	beq.n	8001d04 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	69db      	ldr	r3, [r3, #28]
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d146      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c48:	4b33      	ldr	r3, [pc, #204]	@ (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4e:	f7ff f819 	bl	8000c84 <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c56:	f7ff f815 	bl	8000c84 <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b02      	cmp	r3, #2
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e06d      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c68:	4b29      	ldr	r3, [pc, #164]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1f0      	bne.n	8001c56 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c7c:	d108      	bne.n	8001c90 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	4921      	ldr	r1, [pc, #132]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c90:	4b1f      	ldr	r3, [pc, #124]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6a19      	ldr	r1, [r3, #32]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	491b      	ldr	r1, [pc, #108]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ca8:	4b1b      	ldr	r3, [pc, #108]	@ (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001caa:	2201      	movs	r2, #1
 8001cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cae:	f7fe ffe9 	bl	8000c84 <HAL_GetTick>
 8001cb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb4:	e008      	b.n	8001cc8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb6:	f7fe ffe5 	bl	8000c84 <HAL_GetTick>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e03d      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cc8:	4b11      	ldr	r3, [pc, #68]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f0      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x46a>
 8001cd4:	e035      	b.n	8001d42 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cd6:	4b10      	ldr	r3, [pc, #64]	@ (8001d18 <HAL_RCC_OscConfig+0x4cc>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cdc:	f7fe ffd2 	bl	8000c84 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ce4:	f7fe ffce 	bl	8000c84 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e026      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf6:	4b06      	ldr	r3, [pc, #24]	@ (8001d10 <HAL_RCC_OscConfig+0x4c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f0      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x498>
 8001d02:	e01e      	b.n	8001d42 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e019      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	40007000 	.word	0x40007000
 8001d18:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d4c <HAL_RCC_OscConfig+0x500>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d106      	bne.n	8001d3e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e000      	b.n	8001d44 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d42:	2300      	movs	r3, #0
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e0d0      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d64:	4b6a      	ldr	r3, [pc, #424]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0307 	and.w	r3, r3, #7
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d910      	bls.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d72:	4b67      	ldr	r3, [pc, #412]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f023 0207 	bic.w	r2, r3, #7
 8001d7a:	4965      	ldr	r1, [pc, #404]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d82:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0307 	and.w	r3, r3, #7
 8001d8a:	683a      	ldr	r2, [r7, #0]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d001      	beq.n	8001d94 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e0b8      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0302 	and.w	r3, r3, #2
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d020      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d005      	beq.n	8001db8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001dac:	4b59      	ldr	r3, [pc, #356]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	4a58      	ldr	r2, [pc, #352]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001db2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001db6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d005      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001dc4:	4b53      	ldr	r3, [pc, #332]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	4a52      	ldr	r2, [pc, #328]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001dce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b50      	ldr	r3, [pc, #320]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	494d      	ldr	r1, [pc, #308]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d040      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d107      	bne.n	8001e06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df6:	4b47      	ldr	r3, [pc, #284]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d115      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e07f      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d107      	bne.n	8001e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0e:	4b41      	ldr	r3, [pc, #260]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d109      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e073      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1e:	4b3d      	ldr	r3, [pc, #244]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0302 	and.w	r3, r3, #2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d101      	bne.n	8001e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e06b      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b39      	ldr	r3, [pc, #228]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4936      	ldr	r1, [pc, #216]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e40:	f7fe ff20 	bl	8000c84 <HAL_GetTick>
 8001e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe ff1c 	bl	8000c84 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e053      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b2d      	ldr	r3, [pc, #180]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e70:	4b27      	ldr	r3, [pc, #156]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0307 	and.w	r3, r3, #7
 8001e78:	683a      	ldr	r2, [r7, #0]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d210      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7e:	4b24      	ldr	r3, [pc, #144]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f023 0207 	bic.w	r2, r3, #7
 8001e86:	4922      	ldr	r1, [pc, #136]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_RCC_ClockConfig+0x1c0>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0307 	and.w	r3, r3, #7
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	d001      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e032      	b.n	8001f06 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d008      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001eac:	4b19      	ldr	r3, [pc, #100]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	4916      	ldr	r1, [pc, #88]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0308 	and.w	r3, r3, #8
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d009      	beq.n	8001ede <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	691b      	ldr	r3, [r3, #16]
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	490e      	ldr	r1, [pc, #56]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	4313      	orrs	r3, r2
 8001edc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ede:	f000 f821 	bl	8001f24 <HAL_RCC_GetSysClockFreq>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	091b      	lsrs	r3, r3, #4
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	490a      	ldr	r1, [pc, #40]	@ (8001f18 <HAL_RCC_ClockConfig+0x1c8>)
 8001ef0:	5ccb      	ldrb	r3, [r1, r3]
 8001ef2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ef6:	4a09      	ldr	r2, [pc, #36]	@ (8001f1c <HAL_RCC_ClockConfig+0x1cc>)
 8001ef8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001efa:	4b09      	ldr	r3, [pc, #36]	@ (8001f20 <HAL_RCC_ClockConfig+0x1d0>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7fe fe7e 	bl	8000c00 <HAL_InitTick>

  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40021000 	.word	0x40021000
 8001f18:	080030f4 	.word	0x080030f4
 8001f1c:	20000400 	.word	0x20000400
 8001f20:	20000404 	.word	0x20000404

08001f24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	2300      	movs	r3, #0
 8001f38:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f003 030c 	and.w	r3, r3, #12
 8001f4a:	2b04      	cmp	r3, #4
 8001f4c:	d002      	beq.n	8001f54 <HAL_RCC_GetSysClockFreq+0x30>
 8001f4e:	2b08      	cmp	r3, #8
 8001f50:	d003      	beq.n	8001f5a <HAL_RCC_GetSysClockFreq+0x36>
 8001f52:	e027      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f54:	4b19      	ldr	r3, [pc, #100]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f56:	613b      	str	r3, [r7, #16]
      break;
 8001f58:	e027      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	0c9b      	lsrs	r3, r3, #18
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4a17      	ldr	r2, [pc, #92]	@ (8001fc0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d010      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001f72:	4b11      	ldr	r3, [pc, #68]	@ (8001fb8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	0c5b      	lsrs	r3, r3, #17
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	4a11      	ldr	r2, [pc, #68]	@ (8001fc4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001f7e:	5cd3      	ldrb	r3, [r2, r3]
 8001f80:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a0d      	ldr	r2, [pc, #52]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001f86:	fb03 f202 	mul.w	r2, r3, r2
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f90:	617b      	str	r3, [r7, #20]
 8001f92:	e004      	b.n	8001f9e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	613b      	str	r3, [r7, #16]
      break;
 8001fa2:	e002      	b.n	8001faa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa4:	4b05      	ldr	r3, [pc, #20]	@ (8001fbc <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa6:	613b      	str	r3, [r7, #16]
      break;
 8001fa8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001faa:	693b      	ldr	r3, [r7, #16]
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	371c      	adds	r7, #28
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	007a1200 	.word	0x007a1200
 8001fc0:	0800310c 	.word	0x0800310c
 8001fc4:	0800311c 	.word	0x0800311c
 8001fc8:	003d0900 	.word	0x003d0900

08001fcc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fd0:	4b02      	ldr	r3, [pc, #8]	@ (8001fdc <HAL_RCC_GetHCLKFreq+0x10>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bc80      	pop	{r7}
 8001fda:	4770      	bx	lr
 8001fdc:	20000400 	.word	0x20000400

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe4:	f7ff fff2 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40021000 	.word	0x40021000
 8002004:	08003104 	.word	0x08003104

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800200c:	f7ff ffde 	bl	8001fcc <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	0adb      	lsrs	r3, r3, #11
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40021000 	.word	0x40021000
 800202c:	08003104 	.word	0x08003104

08002030 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002038:	4b0a      	ldr	r3, [pc, #40]	@ (8002064 <RCC_Delay+0x34>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a0a      	ldr	r2, [pc, #40]	@ (8002068 <RCC_Delay+0x38>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0a5b      	lsrs	r3, r3, #9
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800204c:	bf00      	nop
  }
  while (Delay --);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1e5a      	subs	r2, r3, #1
 8002052:	60fa      	str	r2, [r7, #12]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1f9      	bne.n	800204c <RCC_Delay+0x1c>
}
 8002058:	bf00      	nop
 800205a:	bf00      	nop
 800205c:	3714      	adds	r7, #20
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr
 8002064:	20000400 	.word	0x20000400
 8002068:	10624dd3 	.word	0x10624dd3

0800206c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e076      	b.n	800216c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	2b00      	cmp	r3, #0
 8002084:	d108      	bne.n	8002098 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800208e:	d009      	beq.n	80020a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	61da      	str	r2, [r3, #28]
 8002096:	e005      	b.n	80020a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2200      	movs	r2, #0
 800209c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d106      	bne.n	80020c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fba6 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80020da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80020ec:	431a      	orrs	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	431a      	orrs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	695b      	ldr	r3, [r3, #20]
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	699b      	ldr	r3, [r3, #24]
 8002110:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002128:	ea42 0103 	orr.w	r1, r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002130:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	0c1a      	lsrs	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f002 0204 	and.w	r2, r2, #4
 800214a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	69da      	ldr	r2, [r3, #28]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800215a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}

08002174 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08c      	sub	sp, #48	@ 0x30
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002182:	2301      	movs	r3, #1
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002192:	2b01      	cmp	r3, #1
 8002194:	d101      	bne.n	800219a <HAL_SPI_TransmitReceive+0x26>
 8002196:	2302      	movs	r3, #2
 8002198:	e198      	b.n	80024cc <HAL_SPI_TransmitReceive+0x358>
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	2201      	movs	r2, #1
 800219e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021a2:	f7fe fd6f 	bl	8000c84 <HAL_GetTick>
 80021a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80021b8:	887b      	ldrh	r3, [r7, #2]
 80021ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80021bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d00f      	beq.n	80021e4 <HAL_SPI_TransmitReceive+0x70>
 80021c4:	69fb      	ldr	r3, [r7, #28]
 80021c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80021ca:	d107      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d103      	bne.n	80021dc <HAL_SPI_TransmitReceive+0x68>
 80021d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d003      	beq.n	80021e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80021dc:	2302      	movs	r3, #2
 80021de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80021e2:	e16d      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d005      	beq.n	80021f6 <HAL_SPI_TransmitReceive+0x82>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <HAL_SPI_TransmitReceive+0x82>
 80021f0:	887b      	ldrh	r3, [r7, #2]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d103      	bne.n	80021fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80021f6:	2301      	movs	r3, #1
 80021f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80021fc:	e160      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b04      	cmp	r3, #4
 8002208:	d003      	beq.n	8002212 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2205      	movs	r2, #5
 800220e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	887a      	ldrh	r2, [r7, #2]
 8002222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	887a      	ldrh	r2, [r7, #2]
 8002228:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	68ba      	ldr	r2, [r7, #8]
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	887a      	ldrh	r2, [r7, #2]
 8002234:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	887a      	ldrh	r2, [r7, #2]
 800223a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002252:	2b40      	cmp	r3, #64	@ 0x40
 8002254:	d007      	beq.n	8002266 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800226e:	d17c      	bne.n	800236a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d002      	beq.n	800227e <HAL_SPI_TransmitReceive+0x10a>
 8002278:	8b7b      	ldrh	r3, [r7, #26]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d16a      	bne.n	8002354 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	881a      	ldrh	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228e:	1c9a      	adds	r2, r3, #2
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022a2:	e057      	b.n	8002354 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	f003 0302 	and.w	r3, r3, #2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d11b      	bne.n	80022ea <HAL_SPI_TransmitReceive+0x176>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d016      	beq.n	80022ea <HAL_SPI_TransmitReceive+0x176>
 80022bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d113      	bne.n	80022ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c6:	881a      	ldrh	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d2:	1c9a      	adds	r2, r3, #2
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022dc:	b29b      	uxth	r3, r3
 80022de:	3b01      	subs	r3, #1
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80022e6:	2300      	movs	r3, #0
 80022e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d119      	bne.n	800232c <HAL_SPI_TransmitReceive+0x1b8>
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d014      	beq.n	800232c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800230c:	b292      	uxth	r2, r2
 800230e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002314:	1c9a      	adds	r2, r3, #2
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800231e:	b29b      	uxth	r3, r3
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002328:	2301      	movs	r3, #1
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800232c:	f7fe fcaa 	bl	8000c84 <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002338:	429a      	cmp	r2, r3
 800233a:	d80b      	bhi.n	8002354 <HAL_SPI_TransmitReceive+0x1e0>
 800233c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800233e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002342:	d007      	beq.n	8002354 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8002344:	2303      	movs	r3, #3
 8002346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2201      	movs	r2, #1
 800234e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002352:	e0b5      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002358:	b29b      	uxth	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d1a2      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x130>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002362:	b29b      	uxth	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d19d      	bne.n	80022a4 <HAL_SPI_TransmitReceive+0x130>
 8002368:	e080      	b.n	800246c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d002      	beq.n	8002378 <HAL_SPI_TransmitReceive+0x204>
 8002372:	8b7b      	ldrh	r3, [r7, #26]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d16f      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	330c      	adds	r3, #12
 8002382:	7812      	ldrb	r2, [r2, #0]
 8002384:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	1c5a      	adds	r2, r3, #1
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002394:	b29b      	uxth	r3, r3
 8002396:	3b01      	subs	r3, #1
 8002398:	b29a      	uxth	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800239e:	e05b      	b.n	8002458 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	f003 0302 	and.w	r3, r3, #2
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d11c      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x274>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d017      	beq.n	80023e8 <HAL_SPI_TransmitReceive+0x274>
 80023b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d114      	bne.n	80023e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	330c      	adds	r3, #12
 80023c8:	7812      	ldrb	r2, [r2, #0]
 80023ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	3b01      	subs	r3, #1
 80023de:	b29a      	uxth	r2, r3
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023e4:	2300      	movs	r3, #0
 80023e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d119      	bne.n	800242a <HAL_SPI_TransmitReceive+0x2b6>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d014      	beq.n	800242a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68da      	ldr	r2, [r3, #12]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002412:	1c5a      	adds	r2, r3, #1
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800241c:	b29b      	uxth	r3, r3
 800241e:	3b01      	subs	r3, #1
 8002420:	b29a      	uxth	r2, r3
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002426:	2301      	movs	r3, #1
 8002428:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800242a:	f7fe fc2b 	bl	8000c84 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002436:	429a      	cmp	r2, r3
 8002438:	d803      	bhi.n	8002442 <HAL_SPI_TransmitReceive+0x2ce>
 800243a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800243c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002440:	d102      	bne.n	8002448 <HAL_SPI_TransmitReceive+0x2d4>
 8002442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002444:	2b00      	cmp	r3, #0
 8002446:	d107      	bne.n	8002458 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8002456:	e033      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245c:	b29b      	uxth	r3, r3
 800245e:	2b00      	cmp	r3, #0
 8002460:	d19e      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x22c>
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002466:	b29b      	uxth	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d199      	bne.n	80023a0 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800246e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 f8b7 	bl	80025e4 <SPI_EndRxTxTransaction>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d006      	beq.n	800248a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2220      	movs	r2, #32
 8002486:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8002488:	e01a      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10a      	bne.n	80024a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002492:	2300      	movs	r3, #0
 8002494:	617b      	str	r3, [r7, #20]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	68db      	ldr	r3, [r3, #12]
 800249c:	617b      	str	r3, [r7, #20]
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d003      	beq.n	80024b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80024b6:	e003      	b.n	80024c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80024c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	3730      	adds	r7, #48	@ 0x30
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	60b9      	str	r1, [r7, #8]
 80024de:	603b      	str	r3, [r7, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024e4:	f7fe fbce 	bl	8000c84 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	4413      	add	r3, r2
 80024f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80024f4:	f7fe fbc6 	bl	8000c84 <HAL_GetTick>
 80024f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80024fa:	4b39      	ldr	r3, [pc, #228]	@ (80025e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	015b      	lsls	r3, r3, #5
 8002500:	0d1b      	lsrs	r3, r3, #20
 8002502:	69fa      	ldr	r2, [r7, #28]
 8002504:	fb02 f303 	mul.w	r3, r2, r3
 8002508:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800250a:	e054      	b.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d050      	beq.n	80025b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002514:	f7fe fbb6 	bl	8000c84 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	69fa      	ldr	r2, [r7, #28]
 8002520:	429a      	cmp	r2, r3
 8002522:	d902      	bls.n	800252a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d13d      	bne.n	80025a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002538:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002542:	d111      	bne.n	8002568 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800254c:	d004      	beq.n	8002558 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002556:	d107      	bne.n	8002568 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002566:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800256c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002570:	d10f      	bne.n	8002592 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002590:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2201      	movs	r2, #1
 8002596:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2200      	movs	r2, #0
 800259e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e017      	b.n	80025d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025ac:	2300      	movs	r3, #0
 80025ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	3b01      	subs	r3, #1
 80025b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689a      	ldr	r2, [r3, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	4013      	ands	r3, r2
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	bf0c      	ite	eq
 80025c6:	2301      	moveq	r3, #1
 80025c8:	2300      	movne	r3, #0
 80025ca:	b2db      	uxtb	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	79fb      	ldrb	r3, [r7, #7]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d19b      	bne.n	800250c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	20000400 	.word	0x20000400

080025e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b086      	sub	sp, #24
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	9300      	str	r3, [sp, #0]
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	2200      	movs	r2, #0
 80025f8:	2180      	movs	r1, #128	@ 0x80
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff ff6a 	bl	80024d4 <SPI_WaitFlagStateUntilTimeout>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e000      	b.n	8002618 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8002616:	2300      	movs	r3, #0
}
 8002618:	4618      	mov	r0, r3
 800261a:	3710      	adds	r7, #16
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}

08002620 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e042      	b.n	80026b8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f7fe f9f8 	bl	8000a3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2224      	movs	r2, #36	@ 0x24
 8002650:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002662:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	f000 fc7f 	bl	8002f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	691a      	ldr	r2, [r3, #16]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002678:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695a      	ldr	r2, [r3, #20]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002688:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	68da      	ldr	r2, [r3, #12]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002698:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2220      	movs	r2, #32
 80026ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b0ba      	sub	sp, #232	@ 0xe8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	695b      	ldr	r3, [r3, #20]
 80026e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80026f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80026f6:	f003 030f 	and.w	r3, r3, #15
 80026fa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80026fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10f      	bne.n	8002726 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800270a:	f003 0320 	and.w	r3, r3, #32
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_UART_IRQHandler+0x66>
 8002712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002716:	f003 0320 	and.w	r3, r3, #32
 800271a:	2b00      	cmp	r3, #0
 800271c:	d003      	beq.n	8002726 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f000 fb63 	bl	8002dea <UART_Receive_IT>
      return;
 8002724:	e25b      	b.n	8002bde <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002726:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800272a:	2b00      	cmp	r3, #0
 800272c:	f000 80de 	beq.w	80028ec <HAL_UART_IRQHandler+0x22c>
 8002730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002734:	f003 0301 	and.w	r3, r3, #1
 8002738:	2b00      	cmp	r3, #0
 800273a:	d106      	bne.n	800274a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800273c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002740:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 80d1 	beq.w	80028ec <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800274a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00b      	beq.n	800276e <HAL_UART_IRQHandler+0xae>
 8002756:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d005      	beq.n	800276e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002766:	f043 0201 	orr.w	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800276e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d00b      	beq.n	8002792 <HAL_UART_IRQHandler+0xd2>
 800277a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d005      	beq.n	8002792 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278a:	f043 0202 	orr.w	r2, r3, #2
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d00b      	beq.n	80027b6 <HAL_UART_IRQHandler+0xf6>
 800279e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	f043 0204 	orr.w	r2, r3, #4
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80027b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d011      	beq.n	80027e6 <HAL_UART_IRQHandler+0x126>
 80027c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80027c6:	f003 0320 	and.w	r3, r3, #32
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80027ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d005      	beq.n	80027e6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027de:	f043 0208 	orr.w	r2, r3, #8
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f000 81f2 	beq.w	8002bd4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80027f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80027f4:	f003 0320 	and.w	r3, r3, #32
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d008      	beq.n	800280e <HAL_UART_IRQHandler+0x14e>
 80027fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002800:	f003 0320 	and.w	r3, r3, #32
 8002804:	2b00      	cmp	r3, #0
 8002806:	d002      	beq.n	800280e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f000 faee 	bl	8002dea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002818:	2b00      	cmp	r3, #0
 800281a:	bf14      	ite	ne
 800281c:	2301      	movne	r3, #1
 800281e:	2300      	moveq	r3, #0
 8002820:	b2db      	uxtb	r3, r3
 8002822:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800282a:	f003 0308 	and.w	r3, r3, #8
 800282e:	2b00      	cmp	r3, #0
 8002830:	d103      	bne.n	800283a <HAL_UART_IRQHandler+0x17a>
 8002832:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002836:	2b00      	cmp	r3, #0
 8002838:	d04f      	beq.n	80028da <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f9f8 	bl	8002c30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	695b      	ldr	r3, [r3, #20]
 8002846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800284a:	2b00      	cmp	r3, #0
 800284c:	d041      	beq.n	80028d2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	3314      	adds	r3, #20
 8002854:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002858:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800285c:	e853 3f00 	ldrex	r3, [r3]
 8002860:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002864:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002868:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800286c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	3314      	adds	r3, #20
 8002876:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800287a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800287e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002882:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002886:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800288a:	e841 2300 	strex	r3, r2, [r1]
 800288e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002892:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d1d9      	bne.n	800284e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d013      	beq.n	80028ca <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028a6:	4a7e      	ldr	r2, [pc, #504]	@ (8002aa0 <HAL_UART_IRQHandler+0x3e0>)
 80028a8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fb3a 	bl	8000f28 <HAL_DMA_Abort_IT>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d016      	beq.n	80028e8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80028c4:	4610      	mov	r0, r2
 80028c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028c8:	e00e      	b.n	80028e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f99c 	bl	8002c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d0:	e00a      	b.n	80028e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f998 	bl	8002c08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028d8:	e006      	b.n	80028e8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f994 	bl	8002c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80028e6:	e175      	b.n	8002bd4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80028e8:	bf00      	nop
    return;
 80028ea:	e173      	b.n	8002bd4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	f040 814f 	bne.w	8002b94 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80028f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028fa:	f003 0310 	and.w	r3, r3, #16
 80028fe:	2b00      	cmp	r3, #0
 8002900:	f000 8148 	beq.w	8002b94 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002904:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002908:	f003 0310 	and.w	r3, r3, #16
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8141 	beq.w	8002b94 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60bb      	str	r3, [r7, #8]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	60bb      	str	r3, [r7, #8]
 8002926:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002932:	2b00      	cmp	r3, #0
 8002934:	f000 80b6 	beq.w	8002aa4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002944:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 8145 	beq.w	8002bd8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002952:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002956:	429a      	cmp	r2, r3
 8002958:	f080 813e 	bcs.w	8002bd8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002962:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	2b20      	cmp	r3, #32
 800296c:	f000 8088 	beq.w	8002a80 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	330c      	adds	r3, #12
 8002976:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002986:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800298a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800298e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	330c      	adds	r3, #12
 8002998:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800299c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029a0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029a4:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80029a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029ac:	e841 2300 	strex	r3, r2, [r1]
 80029b0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80029b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1d9      	bne.n	8002970 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3314      	adds	r3, #20
 80029c2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80029cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80029ce:	f023 0301 	bic.w	r3, r3, #1
 80029d2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	3314      	adds	r3, #20
 80029dc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80029e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80029e4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80029e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80029ec:	e841 2300 	strex	r3, r2, [r1]
 80029f0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80029f2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e1      	bne.n	80029bc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	3314      	adds	r3, #20
 80029fe:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a00:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002a02:	e853 3f00 	ldrex	r3, [r3]
 8002a06:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002a08:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002a0a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	3314      	adds	r3, #20
 8002a18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002a1c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002a1e:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a20:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002a22:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002a24:	e841 2300 	strex	r3, r2, [r1]
 8002a28:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002a2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e3      	bne.n	80029f8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2220      	movs	r2, #32
 8002a34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	330c      	adds	r3, #12
 8002a44:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002a48:	e853 3f00 	ldrex	r3, [r3]
 8002a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002a4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002a50:	f023 0310 	bic.w	r3, r3, #16
 8002a54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	330c      	adds	r3, #12
 8002a5e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002a62:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002a64:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a66:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002a68:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a6a:	e841 2300 	strex	r3, r2, [r1]
 8002a6e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002a70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1e3      	bne.n	8002a3e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f7fe fa19 	bl	8000eb2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2202      	movs	r2, #2
 8002a84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	4619      	mov	r1, r3
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f8bf 	bl	8002c1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002a9c:	e09c      	b.n	8002bd8 <HAL_UART_IRQHandler+0x518>
 8002a9e:	bf00      	nop
 8002aa0:	08002cf5 	.word	0x08002cf5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ab8:	b29b      	uxth	r3, r3
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f000 808e 	beq.w	8002bdc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002ac0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8089 	beq.w	8002bdc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ad4:	e853 3f00 	ldrex	r3, [r3]
 8002ad8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002ada:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002adc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002ae0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002aee:	647a      	str	r2, [r7, #68]	@ 0x44
 8002af0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002af4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002af6:	e841 2300 	strex	r3, r2, [r1]
 8002afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d1e3      	bne.n	8002aca <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	3314      	adds	r3, #20
 8002b08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b0c:	e853 3f00 	ldrex	r3, [r3]
 8002b10:	623b      	str	r3, [r7, #32]
   return(result);
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	f023 0301 	bic.w	r3, r3, #1
 8002b18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	3314      	adds	r3, #20
 8002b22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002b26:	633a      	str	r2, [r7, #48]	@ 0x30
 8002b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e3      	bne.n	8002b02 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	330c      	adds	r3, #12
 8002b4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	60fb      	str	r3, [r7, #12]
   return(result);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f023 0310 	bic.w	r3, r3, #16
 8002b5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	330c      	adds	r3, #12
 8002b68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002b6c:	61fa      	str	r2, [r7, #28]
 8002b6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b70:	69b9      	ldr	r1, [r7, #24]
 8002b72:	69fa      	ldr	r2, [r7, #28]
 8002b74:	e841 2300 	strex	r3, r2, [r1]
 8002b78:	617b      	str	r3, [r7, #20]
   return(result);
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1e3      	bne.n	8002b48 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2202      	movs	r2, #2
 8002b84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002b86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f844 	bl	8002c1a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002b92:	e023      	b.n	8002bdc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d009      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x4f4>
 8002ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d003      	beq.n	8002bb4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f8b5 	bl	8002d1c <UART_Transmit_IT>
    return;
 8002bb2:	e014      	b.n	8002bde <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002bb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d00e      	beq.n	8002bde <HAL_UART_IRQHandler+0x51e>
 8002bc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d008      	beq.n	8002bde <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f8f4 	bl	8002dba <UART_EndTransmit_IT>
    return;
 8002bd2:	e004      	b.n	8002bde <HAL_UART_IRQHandler+0x51e>
    return;
 8002bd4:	bf00      	nop
 8002bd6:	e002      	b.n	8002bde <HAL_UART_IRQHandler+0x51e>
      return;
 8002bd8:	bf00      	nop
 8002bda:	e000      	b.n	8002bde <HAL_UART_IRQHandler+0x51e>
      return;
 8002bdc:	bf00      	nop
  }
}
 8002bde:	37e8      	adds	r7, #232	@ 0xe8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002bfe:	bf00      	nop
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
 8002c22:	460b      	mov	r3, r1
 8002c24:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c26:	bf00      	nop
 8002c28:	370c      	adds	r7, #12
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bc80      	pop	{r7}
 8002c2e:	4770      	bx	lr

08002c30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b095      	sub	sp, #84	@ 0x54
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	330c      	adds	r3, #12
 8002c3e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c42:	e853 3f00 	ldrex	r3, [r3]
 8002c46:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c4a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	330c      	adds	r3, #12
 8002c56:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c58:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c5c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c60:	e841 2300 	strex	r3, r2, [r1]
 8002c64:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d1e5      	bne.n	8002c38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	3314      	adds	r3, #20
 8002c72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	e853 3f00 	ldrex	r3, [r3]
 8002c7a:	61fb      	str	r3, [r7, #28]
   return(result);
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	3314      	adds	r3, #20
 8002c8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002c8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e5      	bne.n	8002c6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d119      	bne.n	8002cdc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	330c      	adds	r3, #12
 8002cae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	e853 3f00 	ldrex	r3, [r3]
 8002cb6:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f023 0310 	bic.w	r3, r3, #16
 8002cbe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	330c      	adds	r3, #12
 8002cc6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002cc8:	61ba      	str	r2, [r7, #24]
 8002cca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ccc:	6979      	ldr	r1, [r7, #20]
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	e841 2300 	strex	r3, r2, [r1]
 8002cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e5      	bne.n	8002ca8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002cea:	bf00      	nop
 8002cec:	3754      	adds	r7, #84	@ 0x54
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bc80      	pop	{r7}
 8002cf2:	4770      	bx	lr

08002cf4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b084      	sub	sp, #16
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002d0e:	68f8      	ldr	r0, [r7, #12]
 8002d10:	f7ff ff7a 	bl	8002c08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d14:	bf00      	nop
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d2a:	b2db      	uxtb	r3, r3
 8002d2c:	2b21      	cmp	r3, #33	@ 0x21
 8002d2e:	d13e      	bne.n	8002dae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d38:	d114      	bne.n	8002d64 <UART_Transmit_IT+0x48>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d110      	bne.n	8002d64 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a1b      	ldr	r3, [r3, #32]
 8002d46:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	881b      	ldrh	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d56:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	1c9a      	adds	r2, r3, #2
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	621a      	str	r2, [r3, #32]
 8002d62:	e008      	b.n	8002d76 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a1b      	ldr	r3, [r3, #32]
 8002d68:	1c59      	adds	r1, r3, #1
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	6211      	str	r1, [r2, #32]
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d7a:	b29b      	uxth	r3, r3
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	4619      	mov	r1, r3
 8002d84:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d10f      	bne.n	8002daa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002d98:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68da      	ldr	r2, [r3, #12]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002da8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr

08002dba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b082      	sub	sp, #8
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2220      	movs	r2, #32
 8002dd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff ff02 	bl	8002be4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b08c      	sub	sp, #48	@ 0x30
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b22      	cmp	r3, #34	@ 0x22
 8002dfc:	f040 80ae 	bne.w	8002f5c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e08:	d117      	bne.n	8002e3a <UART_Receive_IT+0x50>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d113      	bne.n	8002e3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002e12:	2300      	movs	r3, #0
 8002e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e28:	b29a      	uxth	r2, r3
 8002e2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	1c9a      	adds	r2, r3, #2
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	629a      	str	r2, [r3, #40]	@ 0x28
 8002e38:	e026      	b.n	8002e88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002e40:	2300      	movs	r3, #0
 8002e42:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e4c:	d007      	beq.n	8002e5e <UART_Receive_IT+0x74>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d10a      	bne.n	8002e6c <UART_Receive_IT+0x82>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d106      	bne.n	8002e6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	b2da      	uxtb	r2, r3
 8002e66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e68:	701a      	strb	r2, [r3, #0]
 8002e6a:	e008      	b.n	8002e7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	1c5a      	adds	r2, r3, #1
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	4619      	mov	r1, r3
 8002e96:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d15d      	bne.n	8002f58 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0220 	bic.w	r2, r2, #32
 8002eaa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	695a      	ldr	r2, [r3, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f022 0201 	bic.w	r2, r2, #1
 8002eca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d135      	bne.n	8002f4e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	330c      	adds	r3, #12
 8002eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	e853 3f00 	ldrex	r3, [r3]
 8002ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	f023 0310 	bic.w	r3, r3, #16
 8002efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	330c      	adds	r3, #12
 8002f06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f08:	623a      	str	r2, [r7, #32]
 8002f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0c:	69f9      	ldr	r1, [r7, #28]
 8002f0e:	6a3a      	ldr	r2, [r7, #32]
 8002f10:	e841 2300 	strex	r3, r2, [r1]
 8002f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1e5      	bne.n	8002ee8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0310 	and.w	r3, r3, #16
 8002f26:	2b10      	cmp	r3, #16
 8002f28:	d10a      	bne.n	8002f40 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	60fb      	str	r3, [r7, #12]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60fb      	str	r3, [r7, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002f44:	4619      	mov	r1, r3
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fe67 	bl	8002c1a <HAL_UARTEx_RxEventCallback>
 8002f4c:	e002      	b.n	8002f54 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f7ff fe51 	bl	8002bf6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002f54:	2300      	movs	r3, #0
 8002f56:	e002      	b.n	8002f5e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	e000      	b.n	8002f5e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002f5c:	2302      	movs	r3, #2
  }
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3730      	adds	r7, #48	@ 0x30
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	430a      	orrs	r2, r1
 8002f84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002fa2:	f023 030c 	bic.w	r3, r3, #12
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	6812      	ldr	r2, [r2, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	430b      	orrs	r3, r1
 8002fae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a2c      	ldr	r2, [pc, #176]	@ (800307c <UART_SetConfig+0x114>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d103      	bne.n	8002fd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002fd0:	f7ff f81a 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	e002      	b.n	8002fde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002fd8:	f7ff f802 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8002fdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4413      	add	r3, r2
 8002fe6:	009a      	lsls	r2, r3, #2
 8002fe8:	441a      	add	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ff4:	4a22      	ldr	r2, [pc, #136]	@ (8003080 <UART_SetConfig+0x118>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	095b      	lsrs	r3, r3, #5
 8002ffc:	0119      	lsls	r1, r3, #4
 8002ffe:	68fa      	ldr	r2, [r7, #12]
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009a      	lsls	r2, r3, #2
 8003008:	441a      	add	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	fbb2 f2f3 	udiv	r2, r2, r3
 8003014:	4b1a      	ldr	r3, [pc, #104]	@ (8003080 <UART_SetConfig+0x118>)
 8003016:	fba3 0302 	umull	r0, r3, r3, r2
 800301a:	095b      	lsrs	r3, r3, #5
 800301c:	2064      	movs	r0, #100	@ 0x64
 800301e:	fb00 f303 	mul.w	r3, r0, r3
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	3332      	adds	r3, #50	@ 0x32
 8003028:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <UART_SetConfig+0x118>)
 800302a:	fba2 2303 	umull	r2, r3, r2, r3
 800302e:	095b      	lsrs	r3, r3, #5
 8003030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003034:	4419      	add	r1, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009a      	lsls	r2, r3, #2
 8003040:	441a      	add	r2, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fbb2 f2f3 	udiv	r2, r2, r3
 800304c:	4b0c      	ldr	r3, [pc, #48]	@ (8003080 <UART_SetConfig+0x118>)
 800304e:	fba3 0302 	umull	r0, r3, r3, r2
 8003052:	095b      	lsrs	r3, r3, #5
 8003054:	2064      	movs	r0, #100	@ 0x64
 8003056:	fb00 f303 	mul.w	r3, r0, r3
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	011b      	lsls	r3, r3, #4
 800305e:	3332      	adds	r3, #50	@ 0x32
 8003060:	4a07      	ldr	r2, [pc, #28]	@ (8003080 <UART_SetConfig+0x118>)
 8003062:	fba2 2303 	umull	r2, r3, r2, r3
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	f003 020f 	and.w	r2, r3, #15
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	440a      	add	r2, r1
 8003072:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003074:	bf00      	nop
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}
 800307c:	40013800 	.word	0x40013800
 8003080:	51eb851f 	.word	0x51eb851f

08003084 <memset>:
 8003084:	4603      	mov	r3, r0
 8003086:	4402      	add	r2, r0
 8003088:	4293      	cmp	r3, r2
 800308a:	d100      	bne.n	800308e <memset+0xa>
 800308c:	4770      	bx	lr
 800308e:	f803 1b01 	strb.w	r1, [r3], #1
 8003092:	e7f9      	b.n	8003088 <memset+0x4>

08003094 <__libc_init_array>:
 8003094:	b570      	push	{r4, r5, r6, lr}
 8003096:	2600      	movs	r6, #0
 8003098:	4d0c      	ldr	r5, [pc, #48]	@ (80030cc <__libc_init_array+0x38>)
 800309a:	4c0d      	ldr	r4, [pc, #52]	@ (80030d0 <__libc_init_array+0x3c>)
 800309c:	1b64      	subs	r4, r4, r5
 800309e:	10a4      	asrs	r4, r4, #2
 80030a0:	42a6      	cmp	r6, r4
 80030a2:	d109      	bne.n	80030b8 <__libc_init_array+0x24>
 80030a4:	f000 f81a 	bl	80030dc <_init>
 80030a8:	2600      	movs	r6, #0
 80030aa:	4d0a      	ldr	r5, [pc, #40]	@ (80030d4 <__libc_init_array+0x40>)
 80030ac:	4c0a      	ldr	r4, [pc, #40]	@ (80030d8 <__libc_init_array+0x44>)
 80030ae:	1b64      	subs	r4, r4, r5
 80030b0:	10a4      	asrs	r4, r4, #2
 80030b2:	42a6      	cmp	r6, r4
 80030b4:	d105      	bne.n	80030c2 <__libc_init_array+0x2e>
 80030b6:	bd70      	pop	{r4, r5, r6, pc}
 80030b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80030bc:	4798      	blx	r3
 80030be:	3601      	adds	r6, #1
 80030c0:	e7ee      	b.n	80030a0 <__libc_init_array+0xc>
 80030c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80030c6:	4798      	blx	r3
 80030c8:	3601      	adds	r6, #1
 80030ca:	e7f2      	b.n	80030b2 <__libc_init_array+0x1e>
 80030cc:	08003120 	.word	0x08003120
 80030d0:	08003120 	.word	0x08003120
 80030d4:	08003120 	.word	0x08003120
 80030d8:	08003124 	.word	0x08003124

080030dc <_init>:
 80030dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030de:	bf00      	nop
 80030e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030e2:	bc08      	pop	{r3}
 80030e4:	469e      	mov	lr, r3
 80030e6:	4770      	bx	lr

080030e8 <_fini>:
 80030e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030ea:	bf00      	nop
 80030ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030ee:	bc08      	pop	{r3}
 80030f0:	469e      	mov	lr, r3
 80030f2:	4770      	bx	lr
